<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="LinkedList" Id="{507bad93-df63-4434-8534-5a0206f239ff}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK LinkedList EXTENDS Disposable IMPLEMENTS I_LinkedList
VAR
	head : I_LinkedListNode;
	tail : I_LinkedListNode;
	eventEmitter : EventEmitter;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{1bcbd990-0de3-4d8e-8ce3-3e188f32ba03}" />
    <Folder Name="Private" Id="{d051f906-57dd-4f21-9ba9-0b96add6d725}" />
    <Method Name="AddAfter" Id="{31eb6e68-b92d-42da-a9fa-0619a1c414e8}">
      <Declaration><![CDATA[METHOD PUBLIC AddAfter
VAR_INPUT
	After : I_LinkedListNode;
	Value : ANY;
END_VAR
VAR
	node : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT ContainsLinkedListNode(After) THEN
	RETURN;
END_IF

node := CreateNode(Value);
AddNodeAfter(After,node);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddBefore" Id="{e6c290a5-2465-4f20-b28c-0466beb8b78c}">
      <Declaration><![CDATA[METHOD PUBLIC AddBefore
VAR_INPUT
	Before : I_LinkedListNode;
	Value : ANY;
END_VAR
VAR
	node : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT ContainsLinkedListNode(Before) THEN
	RETURN;
END_IF

node := CreateNode(Value);
AddNodeBefore(Before,node);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddFirst" Id="{5d981d3a-a50b-4b5c-b059-edb726648924}">
      <Declaration><![CDATA[METHOD PUBLIC AddFirst
VAR_INPUT
	Value : ANY;
END_VAR
VAR
	node : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[node := CreateNode(Value);
AddNodeFirst(node);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddItem" Id="{de50626d-ddda-4fc3-b7bc-aaf9055f4f75}">
      <Declaration><![CDATA[METHOD AddItem
VAR_INPUT
	Item : ANY;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddLast(Item);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddLast" Id="{4f7213b7-04cf-4ecf-9a66-2d5267b89779}">
      <Declaration><![CDATA[METHOD PUBLIC AddLast
VAR_INPUT
	Value : ANY;
END_VAR
VAR
	node : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[node := CreateNode(Value);
AddNodeLast(node);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodeAfter" Id="{f145ce75-428e-488c-8298-631c3e1d9564}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddNodeAfter
VAR_INPUT
	After : I_LinkedListNode;
	Node : I_LinkedListNode;
END_VAR
VAR
	originalNext : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF After = tail THEN
	AddNodeLast(Node);
	RETURN;
END_IF

// After -> Node -> originalNext
originalNext := After.Next;
After.Next := Node;
Node.Previous := After;
Node.Next := originalNext;
originalNext.Previous := Node;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodeBefore" Id="{c4f07308-cdfe-41be-a338-d60df89e46b8}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddNodeBefore
VAR_INPUT
	Before : I_LinkedListNode;
	Node : I_LinkedListNode;
END_VAR
VAR
	originalBefore : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Before = head THEN
	AddNodeFirst(Node);
	RETURN;
END_IF

// originalBefore <- Node <- Before
originalBefore := Before.Previous;
Before.Previous := Node;
Node.Next := Before;
Node.Previous := originalBefore;
originalBefore.Next := Node;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodeFirst" Id="{42562444-7b33-4a3a-acdb-22871880b743}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddNodeFirst
VAR_INPUT
	Node : I_LinkedListNode;
END_VAR
VAR
	originalFirst : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty() THEN
	head := Node;
	tail := Node; 
	RETURN;	
END_IF

// was (First->) originalFirst
// now (First->) Node -> originalFirst

originalFirst := head;
head := Node;
Node.Next := originalFirst;
originalFirst.Previous := Node;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodeLast" Id="{ccabe999-945e-428a-8630-ad1cc968721d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddNodeLast
VAR_INPUT
	Node : I_LinkedListNode;
END_VAR
VAR
	originalLast : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty() THEN
	head := Node;
	tail := Node; 
	RETURN;	
END_IF

originalLast := tail;
tail := Node;
Node.Previous := originalLast;
originalLast.Next := Node;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{68eac5b7-8615-47ef-b82b-6d6f6c286291}">
      <Declaration><![CDATA[METHOD PUBLIC Clear
//VAR
//	currentItem, nextItem : I_DictionaryItem;
//END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty() THEN
	return;
END_IF

RemoveAllNodes();
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{4b179de9-eef1-48a2-95a2-a7ca9d0d433e}">
      <Declaration><![CDATA[METHOD PUBLIC Contains : BOOL
VAR_INPUT
    Item : ANY;
END_VAR
VAR
    found : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[found := Find(Item);
Contains := found <> 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ContainsLinkedListNode" Id="{9c3093fa-1190-4721-b415-48f901dd3daa}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ContainsLinkedListNode : BOOL
VAR_INPUT
    Node : I_LinkedListNode;
END_VAR
VAR
	current : I_LinkedListNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty() THEN	
	RETURN;
END_IF

current := head; 

WHILE current <> 0 DO
	IF current = Node THEN
		ContainsLinkedListNode := TRUE;
		RETURN;
	END_IF
	current := current.next; 
END_WHILE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CopyTo" Id="{1aea4900-d688-48e9-9a9f-8b39c70acb8b}">
      <Declaration><![CDATA[METHOD PUBLIC CopyTo : BOOL
VAR_INPUT
	Destination : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CopyTo := CopyToLocation(Destination.pValue, DINT_TO_UDINT(Destination.diSize));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CopyToLocation" Id="{01bff3c0-b7f3-43be-b887-cf05759eef58}">
      <Declaration><![CDATA[METHOD PUBLIC CopyToLocation : BOOL
VAR_INPUT
	Destination : PVOID;
	DestinationSize : UDINT;
END_VAR
VAR
	currentNode : I_LinkedListNode;
	requiredDestinationSize : UDINT;
	currentPointer : pvoid;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentNode := First;

// first pass we check to see what the total size of the list will be.
WHILE currentNode <> 0 DO
	requiredDestinationSize := requiredDestinationSize + currentNode.DataSize;
	currentNode := currentNode.Next;
END_WHILE

// we will not process the copy if the destination is too small.
IF DestinationSize <> requiredDestinationSize THEN
	RETURN;
END_IF

currentPointer := Destination;
currentNode := First;

WHILE currentNode <> 0 DO
	currentNode.TryGetTo(currentPointer,currentNode.DataSize);
	currentPointer := currentPointer + currentNode.DataSize;
	currentNode := currentNode.Next;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{2e1031c7-13dc-4afc-9b93-190c74b78f2e}">
      <Declaration><![CDATA[PROPERTY PUBLIC Count : ULINT]]></Declaration>
      <Get Name="Get" Id="{b563603e-aeda-46d2-9b03-2be7aae4e8ba}">
        <Declaration><![CDATA[VAR
	current : I_LinkedListNode;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[current := First;

WHILE current <> 0 DO
	Count := Count + 1;
	current := current.Next;
END_WHILE]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CreateNode" Id="{bb10087b-6e62-4679-a76c-1d53a0f3ae10}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateNode : I_LinkedListNode
VAR_INPUT
	Value : ANY;
END_VAR
VAR
	pLinkedListItem : POINTER TO LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pLinkedListItem := __NEW(LinkedListNode(Source := Value)); 
CreateNode := pLinkedListItem^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitChangedEvent" Id="{3292f357-a850-4b07-84b8-6ac1bcad29c4}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitChangedEvent
VAR
	pLinkedListChangedEvent : POINTER TO LinkedListChangedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pLinkedListChangedEvent := __NEW(LinkedListChangedEvent(TargetLinkedList := THIS^));
eventEmitter.Emit('OnLinkedListChanged',pLinkedListChangedEvent^);
pLinkedListChangedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitDisposedEvent" Id="{d5c30bcb-5159-4f97-8dde-50d1098331ac}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitDisposedEvent
VAR
	pLinkedListDisposedEvent : POINTER TO LinkedListDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pLinkedListDisposedEvent := __NEW(LinkedListDisposedEvent(TargetLinkedList := THIS^));
eventEmitter.Emit('OnLinkedListDisposed',pLinkedListDisposedEvent^);
pLinkedListDisposedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{74c302ee-e82a-4710-93c1-dd7b92517af2}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

Clear();
EmitDisposedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{3ec3889b-b920-463d-a4e7-bdc67da7e105}">
      <Declaration><![CDATA[METHOD PUBLIC Find : I_LinkedListNode
VAR_INPUT
	Value : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Find := FindFirstNodeWithValue(Value);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindFirstNodeWithValue" Id="{94e18cd2-5edc-4abb-9ce8-68295aaf4510}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE FindFirstNodeWithValue : I_LinkedListNode
VAR_INPUT
	Value : ANY;
END_VAR
VAR
	current : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty() THEN	
	RETURN;
END_IF

current := head; 

WHILE current <> 0 DO
	IF current.Equals(Value) THEN
		FindFirstNodeWithValue := current;
		RETURN;
	END_IF
	current := current.next; 
END_WHILE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindLast" Id="{6a5b51b7-d3fd-4b80-a1a1-fb9dd29079d2}">
      <Declaration><![CDATA[METHOD PUBLIC FindLast : I_LinkedListNode
VAR_INPUT
	Value : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FindLast := FindLastNodeWithValue(Value);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindLastNodeWithValue" Id="{8f7b6912-8381-467b-9d2a-55b68810957a}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE FindLastNodeWithValue : I_LinkedListNode
VAR_INPUT
	Value : ANY;
END_VAR
VAR
	current : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty() THEN	
	RETURN;
END_IF

current := tail; 

WHILE current <> 0 DO
	IF current.Equals(Value) THEN
		FindLastNodeWithValue := current;
		RETURN;
	END_IF
	current := current.Previous; 
END_WHILE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="First" Id="{15f176b8-eba6-4893-82ba-f8fae375a66e}">
      <Declaration><![CDATA[PROPERTY PUBLIC First : I_LinkedListNode]]></Declaration>
      <Get Name="Get" Id="{5ac29808-a9c8-45f2-be7c-6daabd3e79c7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[First := head;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetEnumerator" Id="{d8bb1b0e-587d-4bf0-b6db-128986479dfd}">
      <Declaration><![CDATA[METHOD PUBLIC GetEnumerator : I_ForwardEnumerator
VAR
	pLinkedListForwardEnumerator : POINTER TO LinkedListForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pLinkedListForwardEnumerator := __NEW(LinkedListForwardEnumerator(Parent := THIS^));
GetEnumerator := pLinkedListForwardEnumerator^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsEmpty" Id="{8ca337ca-ea3a-4a25-b43a-39c0ede8c147}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsEmpty : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsEmpty := head = 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Last" Id="{b4f56a72-14a1-4003-9d24-0596fa4789d3}">
      <Declaration><![CDATA[PROPERTY PUBLIC Last : I_LinkedListNode]]></Declaration>
      <Get Name="Get" Id="{4e4925d3-5504-4666-95bd-648c9e75b01d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Last := tail;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OffEvent" Id="{95eb9567-cd9f-4891-914f-5f286298bc6f}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{c2492a02-8428-4e20-b3a6-aace55b5e0c8}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{7a0112ed-3061-4b02-a40e-eb2b9c06830c}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{eaa992a5-6a55-48db-a185-23ce260d9192}">
      <Declaration><![CDATA[METHOD Remove
VAR_INPUT
	Value : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveItem(Value);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAllNodes" Id="{0d2ee20c-7757-4ee4-89ad-9f4848a333f1}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RemoveAllNodes
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE First <> 0 DO
	RemoveNode(First);
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveFirst" Id="{48f46376-4b16-4840-921a-3d0f98b1990a}">
      <Declaration><![CDATA[METHOD PUBLIC RemoveFirst]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty() THEN
	RETURN;
END_IF

RemoveNode(First);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveItem" Id="{742d63a8-24ea-40db-b03c-82ad814ca21b}">
      <Declaration><![CDATA[METHOD RemoveItem : BOOL
VAR_INPUT
	Item : ANY;
END_VAR
VAR
	foundNode : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[foundNode := FindFirstNodeWithValue(Item);

IF foundNode = 0 THEN
	RETURN;
END_IF

RemoveNode(foundNode);
EmitChangedEvent();

RemoveItem := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveLast" Id="{d50cb0c7-635c-475a-9798-a63ab164b5b9}">
      <Declaration><![CDATA[METHOD PUBLIC RemoveLast
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty() THEN
	RETURN;
END_IF

RemoveNode(Last);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveNode" Id="{9d398b49-4d1a-4729-b707-0284e2263b5d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD RemoveNode : BOOL
VAR_INPUT
	Node : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty() THEN
	RETURN;
END_IF

IF Node = head AND Node = tail THEN
	// node is the only node
	head := 0;
	tail := 0;
	Node.Dispose();
	RETURN;
	
ELSIF Node = head THEN
	// node is the head
	head := node.Next;
	head.Previous := 0;	
	Node.Dispose();
	RETURN;
	
ELSIF Node = tail THEN
	// node is the tail
	tail := node.Previous;
	tail.Next := 0;	
	Node.Dispose();
	RETURN;
ELSE 
	// node is in the middle
	Node.Previous.Next := Node.Next;
	Node.Next.Previous := Node.Previous;
	Node.Dispose();
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>