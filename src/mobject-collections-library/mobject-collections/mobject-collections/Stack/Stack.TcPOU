<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Stack" Id="{4790b190-51f0-4629-938e-d46fbfba08da}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Stack EXTENDS Disposable IMPLEMENTS I_Stack
VAR
	linkedList : LinkedList;
	eventEmitter : EventEmitter;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{ecde9bfc-90e9-4c79-9e97-0d04fb8b2852}" />
    <Folder Name="Private" Id="{de891c82-3022-46d4-b6f0-5fc56fb79101}" />
    <Method Name="AddItem" Id="{910eb6dd-325c-43ba-8aee-45fa4160cf67}">
      <Declaration><![CDATA[METHOD PUBLIC AddItem
VAR_INPUT
	Item : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Push(Item);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{75e9b203-44b9-46cb-9b54-1e02ee5d7b99}">
      <Declaration><![CDATA[METHOD PUBLIC Clear]]></Declaration>
      <Implementation>
        <ST><![CDATA[linkedList.Clear();
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{380b1f79-30ca-466a-8058-741c367b1b90}">
      <Declaration><![CDATA[METHOD PUBLIC Contains : BOOL;
VAR_INPUT
	Item : ANY;
END_VAR
VAR
	found : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[found := linkedList.Find(Item);
Contains := found <> 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CopyTo" Id="{af958370-a50e-4e86-9c4b-ff6a7cc7410a}">
      <Declaration><![CDATA[METHOD PUBLIC CopyTo : BOOL
VAR_INPUT
	Destination : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CopyTo := linkedList.CopyTo(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CopyToLocation" Id="{28903e4e-8156-4bd6-b962-c02c0a27e37c}">
      <Declaration><![CDATA[METHOD PUBLIC CopyToLocation : BOOL
VAR_INPUT
	Destination : PVOID;
	DestinationSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CopyToLocation := linkedList.CopyToLocation(Destination, DestinationSize);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{a94a5378-7530-4234-b8d6-9da634e0e108}">
      <Declaration><![CDATA[PROPERTY PUBLIC Count : ULINT]]></Declaration>
      <Get Name="Get" Id="{32f5b2ef-b4fc-43f9-8efb-27f1fb752ef0}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := linkedList.Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="EmitChangedEvent" Id="{9d07ef5c-4c9e-463e-b22b-f07159dcf6ac}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitChangedEvent
VAR
	pStackChangedEvent : POINTER TO StackChangedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pStackChangedEvent := __NEW(StackChangedEvent(TargetStack := THIS^));
eventEmitter.Emit('OnChanged', pStackChangedEvent^);
pStackChangedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitDisposedEvent" Id="{01539f57-7401-48e9-8a15-acbae7d00ba9}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitDisposedEvent
VAR
	pStackDisposedEvent : POINTER TO StackDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pStackDisposedEvent := __NEW(StackDisposedEvent(TargetStack := THIS^));
eventEmitter.Emit('OnDisposed', pStackDisposedEvent^);
pStackDisposedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{c81b88b1-11a0-4579-8948-ed09528861a4}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

Clear();
EmitDisposedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEnumerator" Id="{40757687-c6f0-426e-be33-fde6ea7dbab6}">
      <Declaration><![CDATA[METHOD PUBLIC GetEnumerator : I_ForwardEnumerator]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetEnumerator := linkedList.GetEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OffEvent" Id="{d047bef4-1488-449e-989f-c9e072c665a5}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{22e1b4a3-3769-4326-86e9-9e4012a985cf}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{830a3309-65c3-4f10-836a-f3a808d9da90}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Push" Id="{1a16ddc8-f918-4565-8544-bf1a2ae21019}">
      <Declaration><![CDATA[METHOD PUBLIC Push
VAR_INPUT
	Item : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[linkedList.AddFirst(Item);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveItem" Id="{ac74a60b-f8ed-4206-aa41-4c071a5aba0b}">
      <Declaration><![CDATA[METHOD PUBLIC RemoveItem : BOOL
VAR_INPUT
	Item : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveItem := linkedList.RemoveItem(Item);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryPeek" Id="{e0200c18-235c-43fd-8c04-d6e1cbe0445e}">
      <Declaration><![CDATA[METHOD PUBLIC TryPeek : BOOL;
VAR_INPUT
	Destination : ANY;
END_VAR
VAR
	first : I_LinkedListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[first := linkedList.First;

IF first = 0 THEN
	RETURN;
END_IF

TryPeek := first.TryGet(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryPop" Id="{5057eaf3-9ed3-4dc9-ada0-912b0844cda6}">
      <Declaration><![CDATA[METHOD PUBLIC TryPop : BOOL;
VAR_INPUT
	Destination : ANY;
END_VAR
VAR
	first : I_LinkedListNode;
	popped : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[first := linkedList.First;

IF first = 0 THEN
	RETURN;
END_IF

popped := linkedList.First.TryGet(Destination);

IF NOT popped THEN
	RETURN;
END_IF

linkedList.RemoveFirst();
EmitChangedEvent();
TryPop := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>