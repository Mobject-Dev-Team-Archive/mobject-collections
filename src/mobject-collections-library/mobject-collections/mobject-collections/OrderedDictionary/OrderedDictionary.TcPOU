<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="OrderedDictionary" Id="{ad45584d-8943-4051-9d8d-636856d0bd8d}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK OrderedDictionary EXTENDS Disposable IMPLEMENTS I_Dictionary
VAR
	eventEmitter : EventEmitter;
	rootNode : I_OrderedDictionaryTreeNode;
	head : I_OrderedDictionaryTreeNode;
	tail : I_OrderedDictionaryTreeNode;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{052ae1ef-7a37-4bc4-81bf-be76cc3f5e48}" />
    <Folder Name="Private" Id="{90e22d8d-b80f-4e28-89d7-6f21d34296a7}" />
    <Method Name="AddKeysInOrderToCollection" Id="{d724f2d0-0f7a-4b29-9032-38f2256db090}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddKeysInOrderToCollection
VAR_INPUT
	Collection : I_Collection;
END_VAR
VAR
	currentNode : I_OrderedDictionaryTreeNode;
	key : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF head = 0 THEN
	RETURN;
END_IF

currentNode := head;

REPEAT
    key := currentNode.Key;
	Collection.AddItem(key);
	currentNode := currentNode.Next;
UNTIL
    currentNode = 0
END_REPEAT;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodesInOrderToCollection" Id="{61f51581-cbfb-46f7-8b47-a65bcff877ff}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddNodesInOrderToCollection
VAR_INPUT
	Collection : I_Collection;
END_VAR
VAR
	currentNode : I_OrderedDictionaryTreeNode;
	key : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF head = 0 THEN
	RETURN;
END_IF

currentNode := head;

REPEAT
	Collection.AddItem(currentNode);
	currentNode := currentNode.Next;
UNTIL
    currentNode = 0
END_REPEAT;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodeToEnd" Id="{82ad831f-2787-4073-8b44-76652a45a0c7}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddNodeToEnd
VAR_INPUT
	Node : I_OrderedDictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF head = 0 THEN
	head := Node;
	tail := Node;
	RETURN;
END_IF

Node.Previous := tail;
Node.Previous.Next := Node;
tail := Node;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddOrUpdate" Id="{1fa36539-807f-4331-b20c-2fd8f2beae44}">
      <Declaration><![CDATA[METHOD PUBLIC AddOrUpdate
VAR_INPUT
	Key : T_MAXSTRING;
	Value : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rootNode := THIS^.RecursiveInsert(Key, Value, rootNode);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Balance" Id="{fec9d40d-df68-4c9f-8301-5aa607076cf4}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE Balance : I_OrderedDictionaryTreeNode
VAR_INPUT
	Node : I_OrderedDictionaryTreeNode;
END_VAR
VAR
	balanceFactor : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[balanceFactor := THIS^.GetBalanceFactor(Node);

IF (balanceFactor > 1) THEN
	IF THIS^.GetBalanceFactor(Node.Left) < 0 THEN
		Node.Left := THIS^.LeftRotate(Node.Left);
	END_IF
	Node := RightRotate(Node);
ELSIF (balanceFactor < -1) THEN
	IF THIS^.GetBalanceFactor(Node.Right) > 0 THEN
		Node.Right := RightRotate(Node.Right);
	END_IF
	Node := LeftRotate(Node);
END_IF

Balance := Node;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{15330a3e-3d74-4eec-a2a2-cd045b83bc36}">
      <Declaration><![CDATA[METHOD PUBLIC Clear
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF rootNode = 0 THEN
	RETURN;
END_IF

THIS^.RecursiveClear(rootNode);
head := 0;
tail := 0;
rootNode := 0;
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ContainsKey" Id="{64161419-de85-4f27-881b-253f6659cd8f}">
      <Declaration><![CDATA[METHOD PUBLIC ContainsKey : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
END_VAR
VAR
	foundNode : I_OrderedDictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[foundNode := THIS^.RecursiveFind(Key, rootNode);

IF foundNode = 0 THEN
	RETURN;
END_IF

ContainsKey := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{e4eb8f90-de4c-4764-8bcf-24d16ef62f22}">
      <Declaration><![CDATA[PROPERTY PUBLIC Count : DINT]]></Declaration>
      <Get Name="Get" Id="{dc6b5814-565a-471f-ae2f-3ef1f814d587}">
        <Declaration><![CDATA[VAR
	NodeCount : DINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RecursiveCountNodes(rootNode, NodeCount);
Count := NodeCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="EmitChangedEvent" Id="{0bd832ce-7dc0-414f-b6d4-c1ae0a00cb3a}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitChangedEvent
VAR
	pDictionaryChangedEvent : POINTER TO KeyValueCollectionChangedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pDictionaryChangedEvent := __NEW(KeyValueCollectionChangedEvent(Target := THIS^));
eventEmitter.Emit('OnChanged', pDictionaryChangedEvent^);
pDictionaryChangedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitDisposedEvent" Id="{fcfa4379-e8d2-40f9-8bc8-0c4acc5106fc}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitDisposedEvent
VAR
	pDictionaryDisposedEvent : POINTER TO KeyValueCollectionDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pDictionaryDisposedEvent := __NEW(KeyValueCollectionDisposedEvent(Target := THIS^));
eventEmitter.Emit('OnDisposed', pDictionaryDisposedEvent^);
pDictionaryDisposedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{2bac30d3-0597-4792-b100-75f9b4e6c6e6}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
    RETURN;
END_IF

Clear();
EmitDisposedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindMinimum" Id="{787fce71-7b07-4f1b-8bdc-1037ce16d780}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE FindMinimum : I_OrderedDictionaryTreeNode
VAR_INPUT
	Node : I_OrderedDictionaryTreeNode;
END_VAR
VAR
	nextNode : I_OrderedDictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nextNode := Node;

WHILE (nextNode.left <> 0) DO
      nextNode := nextNode.left;
END_WHILE;

FindMinimum := nextNode;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetBalanceFactor" Id="{6e9935c7-06cc-4493-82bb-f6cdeec8b633}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetBalanceFactor : DINT
VAR_INPUT
	Node : I_OrderedDictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	GetBalanceFactor := 0;
	RETURN;
END_IF

GetBalanceFactor := THIS^.GetHeight(node.left) - THIS^.GetHeight(node.right);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEnumerator" Id="{371fadbf-1c55-40d9-ad3b-2d78858e224c}">
      <Declaration><![CDATA[METHOD GetEnumerator : I_ForwardEnumerator
VAR
	pNodeCollection : POINTER TO LinkedList;
	pEnumerator : POINTER TO OrderedDictionaryForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodeCollection := __NEW(LinkedList);
THIS^.AddNodesInOrderToCollection(pNodeCollection^);

pEnumerator := __NEW(OrderedDictionaryForwardEnumerator(Parent := THIS^, Nodes := pNodeCollection^));
GetEnumerator := pEnumerator^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetHeight" Id="{7e4dcc0a-2548-45b2-abdb-c50eecaed01f}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetHeight : DINT
VAR_INPUT
	Node : I_OrderedDictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Node = 0 THEN
	GetHeight := -1;
	RETURN;
END_IF

GetHeight := Node.Height;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetKeys" Id="{c767c4b2-f279-4762-aee0-1dabc931c072}">
      <Declaration><![CDATA[METHOD PUBLIC GetKeys : I_Collection
VAR
	pLinkedList : POINTER TO LinkedList;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pLinkedList := __NEW(LinkedList);
THIS^.AddKeysInOrderToCollection(pLinkedList^);
GetKeys := pLinkedList^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetKeyValueEnumerator" Id="{43a6613a-576d-4f9b-a5f9-1c233ccb827e}">
      <Declaration><![CDATA[METHOD GetKeyValueEnumerator : I_KeyValueForwardEnumerator
VAR
	pNodeCollection : POINTER TO LinkedList;
	pEnumerator : POINTER TO OrderedDictionaryForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodeCollection := __NEW(LinkedList);
THIS^.AddNodesInOrderToCollection(pNodeCollection^);

pEnumerator := __NEW(OrderedDictionaryForwardEnumerator(Parent := THIS^, Nodes := pNodeCollection^));
GetKeyValueEnumerator := pEnumerator^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsEmpty" Id="{ccacd1ad-4f2a-463f-ae4d-455861c5c74c}">
      <Declaration><![CDATA[PROPERTY IsEmpty : BOOL]]></Declaration>
      <Get Name="Get" Id="{2f7e0d45-412c-469d-8e3b-94a2eed96274}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsEmpty := rootNode = 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="LeftRotate" Id="{033d674c-8fcd-446b-a2f4-90fa528d5f6d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE LeftRotate : I_OrderedDictionaryTreeNode
VAR_INPUT
	X : I_OrderedDictionaryTreeNode;
END_VAR
VAR
	y : I_OrderedDictionaryTreeNode;
	t2 : I_OrderedDictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[y := X.right;
t2 := y.left;
y.left := X;
X.right := t2;
THIS^.UpdateHeight(X);
THIS^.UpdateHeight(y);
LeftRotate := y;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OffEvent" Id="{3ae90548-2d3d-4a2f-bc32-ad521cccd8d7}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{0891ab85-c1e2-4b4a-84ab-af11bc332776}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{ddb54c5a-35e7-4275-a05a-14fae448494b}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveClear" Id="{dbd596a4-e399-4d14-beeb-283ecf03537a}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveClear
VAR_INPUT
	Node : I_OrderedDictionaryTreeNode;
END_VAR
VAR
	thisNodeKey : T_MAXSTRING;
	leftNodeKey : T_MAXSTRING;
	rightNodeKey : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	RETURN;
END_IF

thisNodeKey := Node.key;

IF (Node.Left <> 0) THEN
	leftNodeKey := Node.Left.key;
END_IF

IF (Node.Right <> 0) THEN
	rightNodeKey := Node.Right.key;
END_IF

RecursiveClear(Node.Left);
RecursiveClear(Node.Right);
Node.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveCountNodes" Id="{8ec139ba-1bba-48d5-9601-74fccba1a2e5}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveCountNodes
VAR_INPUT
	Node : I_OrderedDictionaryTreeNode;
	Count : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Node = 0 THEN
	RETURN;
END_IF

Count := Count + 1;

THIS^.RecursiveCountNodes(Node.Left,Count);
THIS^.RecursiveCountNodes(Node.Right,Count);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveDelete" Id="{3379184b-94e2-45bc-a839-d34bcd9f64dd}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveDelete : I_OrderedDictionaryTreeNode
VAR_INPUT
	Key : T_MAXSTRING;
	Node : I_OrderedDictionaryTreeNode;
END_VAR
VAR
	newNode : I_OrderedDictionaryTreeNode; 
	minValueNode : I_OrderedDictionaryTreeNode;
	minValueNodeParent : I_OrderedDictionaryTreeNode;
	balanceFactor : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
    RETURN;
END_IF

IF (Key < Node.Key) THEN
    Node.left := THIS^.RecursiveDelete(Key, Node.left);
ELSIF (Key > Node.Key) THEN
    Node.right := THIS^.RecursiveDelete(Key, Node.right);
ELSE
    IF (Node.Left = 0) OR (Node.Right = 0) THEN
        IF (Node.Left = 0) THEN
            newNode := Node.Right;
        ELSE
            newNode := Node.Left;
        END_IF
		RemoveNode(Node);
        Node.Dispose();
        THIS^.updateHeight(newNode);
        RecursiveDelete := THIS^.Balance(newNode);
        RETURN;
    ELSE
        minValueNode := FindMinimum(Node.Right);
        Node.Clone(minValueNode);
		ReplaceClonedNodeInOrder(Node, minValueNode);
        Node.Right := THIS^.RecursiveDelete(minValueNode.Key, Node.Right);	
    END_IF
END_IF

THIS^.updateHeight(Node);
RecursiveDelete := THIS^.Balance(Node);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveFind" Id="{b4eca730-b5e9-48d4-a425-1cb8cae7ddaa}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveFind : I_OrderedDictionaryTreeNode
VAR_INPUT
	Key : T_MAXSTRING;
	Node : I_OrderedDictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	RETURN;
END_IF

IF (Key < Node.key) THEN
  RecursiveFind := THIS^.RecursiveFind(key, Node.left);
  RETURN;
ELSIF (key > Node.key) THEN
  RecursiveFind := THIS^.RecursiveFind(key, Node.right);
  RETURN;
ELSE 
  RecursiveFind := Node;
  RETURN;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveInsert" Id="{c4801d36-bfa9-4a92-ac75-73e86af37529}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveInsert : I_OrderedDictionaryTreeNode
VAR_INPUT
	Key : T_MAXSTRING;
	Value : ANY;
	Node : I_OrderedDictionaryTreeNode;
END_VAR
VAR
	pAVLTreeNode : POINTER TO OrderedDictionaryTreeNode;
	balanceFactor : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	pAVLTreeNode := __NEW(OrderedDictionaryTreeNode(NodeKey := Key, NodeSource := Value));
	AddNodeToEnd(pAVLTreeNode^);
	RecursiveInsert := pAVLTreeNode^;
	RETURN;
END_IF

IF (Key < Node.Key) THEN
	Node.left := THIS^.RecursiveInsert(Key, Value, Node.left);
ELSIF (Key > Node.Key) THEN
	Node.right := THIS^.RecursiveInsert(Key, Value, Node.right);
ELSE
	Node.Reinitialize(Key,Value);
	RecursiveInsert := Node;
END_IF

THIS^.updateHeight(node);

balanceFactor := THIS^.GetBalanceFactor(Node);
Node := balance(Node);
RecursiveInsert := Node;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{e5bea8da-9915-493a-aef1-6b3711477260}">
      <Declaration><![CDATA[METHOD PUBLIC Remove
VAR_INPUT
	Key : T_MAXSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rootNode := THIS^.RecursiveDelete(Key, rootNode);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveNode" Id="{398c60c4-357e-4e47-836f-598f9ce0976c}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RemoveNode
VAR_INPUT
	Node : I_OrderedDictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Node = head AND Node.Next = 0 THEN
	head := 0;
	tail := 0; 
	RETURN;
END_IF

IF Node = tail AND Node.Previous = 0 THEN
	head := 0;
	tail := 0; 
	RETURN;
END_IF

IF Node = head THEN
	Node.Next.Previous := 0;
	head := Node.Next;
	RETURN;
END_IF

IF Node = tail THEN
	Node.Previous.Next := 0;
	tail := Node.Previous;
	RETURN;
END_IF

// we need to perform this check as replaced nodes may not be head or tail
// but will have had the previous and next removed. Therefore only true deletes
// will have these set.
IF Node.Previous <> 0 AND Node.Next <> 0 THEN
	Node.Previous.Next := Node.Next;
	Node.Next.Previous := Node.Previous;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReplaceClonedNodeInOrder" Id="{2e26ecac-59aa-431f-9019-0af6290987f5}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ReplaceClonedNodeInOrder
VAR_INPUT
	NodeCloned : I_OrderedDictionaryTreeNode;
	NodeToBeRemoved : I_OrderedDictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NodeToBeRemoved = head THEN
	head := NodeCloned;
END_IF

IF NodeToBeRemoved = tail THEN
	tail := NodeCloned;
END_IF

IF NodeCloned.Previous <> 0 THEN
	NodeCloned.Previous.Next := NodeCloned;
END_IF
NodeToBeRemoved.Previous := 0;

IF NodeCloned.Next <> 0 THEN
	NodeCloned.Next.Previous := NodeCloned;
END_IF
NodeToBeRemoved.Next := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RightRotate" Id="{fc9b3e13-5167-4091-bee2-709a1ac20f9e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RightRotate : I_OrderedDictionaryTreeNode
VAR_INPUT
	Y : I_OrderedDictionaryTreeNode;
END_VAR
VAR
	x : I_OrderedDictionaryTreeNode;
	t2 : I_OrderedDictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[x := Y.left;
t2 := x.right;
x.right := Y;
Y.left := t2;
THIS^.UpdateHeight(Y);
THIS^.UpdateHeight(x);
RightRotate := x;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryAdd" Id="{d68c6049-d3c5-4f87-a1df-de00b9a012ca}">
      <Declaration><![CDATA[METHOD PUBLIC TryAdd : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Value : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ContainsKey(Key) THEN
	RETURN;
END_IF
	  
THIS^.AddOrUpdate(Key, Value);
TryAdd := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetValue" Id="{62530aa1-aa31-4b3d-a842-b16d2482b081}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetValue : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination	: ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetValue := TryGetValueTo(Key, Destination.pValue, DINT_TO_UDINT(Destination.diSize));]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetValueTo" Id="{34fc76c3-2981-461d-b61a-e18c1676564b}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetValueTo : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	DestinationAddress : PVOID;
	DestinationSize : UDINT;
END_VAR
VAR
	foundNode : I_OrderedDictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[foundNode := THIS^.RecursiveFind(Key, rootNode);

IF foundNode = 0 THEN
	RETURN;
END_IF

TryGetValueTo := foundNode.TryGetTo(DestinationAddress, DestinationSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateHeight" Id="{c08f3327-f1b2-42ad-a1a3-d46032e1dc18}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE UpdateHeight
VAR_INPUT
	Node : I_OrderedDictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	RETURN;
END_IF

Node.height := 1 + MAX(THIS^.GetHeight(Node.left), THIS^.GetHeight(Node.right));]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>