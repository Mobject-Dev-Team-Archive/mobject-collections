<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="DictionaryForwardEnumerator" Id="{ea3219ac-d83f-43b4-88b1-6fa980a23e92}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK DictionaryForwardEnumerator EXTENDS Disposable IMPLEMENTS I_ForwardEnumerator, I_EventHandler
VAR
	parent : I_Dictionary;
	nodes : I_Collection;
	collectionEnumerator : I_ForwardEnumerator;
	currentNode : I_DictionaryTreeNode;
	moveNextCalled : BOOL := FALSE;
	invalid : BOOL := FALSE; 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{0d0a8d67-edb1-4e55-95da-feed425ae835}" />
    <Folder Name="Destructor" Id="{0b4c622d-3ac3-420f-bc30-23f13a766bfc}" />
    <Method Name="FB_exit" Id="{943c6307-4571-4caa-961c-9e90354ba9da}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

collectionEnumerator.Dispose();
nodes.Dispose();

IF parent = 0 THEN
	RETURN;
END_IF

parent.OffEvent('OnChanged',THIS^);
parent.OffEvent('OnDisposed',THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{ebbefe6c-2e3f-417d-8eee-63420148046f}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : I_Dictionary;
	Nodes : I_Collection;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Parent.OnEvent('OnChanged',THIS^);
Parent.OnEvent('OnDisposed',THIS^);
THIS^.parent := Parent;
THIS^.nodes := Nodes;
THIS^.collectionEnumerator := Nodes.GetEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleEvent" Id="{2ad883e0-4994-4e76-b5a6-9610a200e0a1}">
      <Declaration><![CDATA[METHOD PUBLIC HandleEvent
VAR_INPUT
	Event : I_Event;
END_VAR
VAR
	changedEvent : I_KeyValueCollectionChangedEvent;
	disposedEvent : I_KeyValueCollectionDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __QUERYINTERFACE(Event, changedEvent) THEN
	invalid := TRUE;
	currentNode := 0;
ELSIF __QUERYINTERFACE(Event, disposedEvent) THEN
	parent := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsValid" Id="{a9896b28-556c-41ba-87d9-6d1bbbf7d810}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{874d0390-688a-4f84-a416-e00d712c3be4}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsValid := (not invalid and parent <> 0);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveNext" Id="{4a4f0f89-4b66-42b6-9a6a-35e922bbc271}">
      <Declaration><![CDATA[METHOD PUBLIC MoveNext : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF invalid THEN
	RETURN;
END_IF

IF collectionEnumerator.MoveNext() THEN
	collectionEnumerator.TryGet(currentNode);
	MoveNext := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGet" Id="{0ffa1c2e-bcbd-4d65-bc20-482a62ad79ab}">
      <Declaration><![CDATA[METHOD PUBLIC TryGet : BOOL;
VAR_INPUT
	Destination : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF currentNode <> 0 THEN
	TryGet := currentNode.TryGet(Destination);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTo" Id="{05da6e1e-3f48-4276-a562-db2e35af7578}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetTo : BOOL;
VAR_INPUT
	DestinationAddress : PVOID;
	DestinationSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF currentNode <> 0 THEN
	TryGetTo := currentNode.TryGetTo(DestinationAddress,DestinationSize);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>