<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="LinkedListForwardEnumerator" Id="{b1356522-2356-47f0-8fc3-88d40e839155}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK LinkedListForwardEnumerator EXTENDS Disposable IMPLEMENTS I_ForwardEnumerator, I_EventHandler
VAR
	parent : I_LinkedList;
	currentNode : I_LinkedListNode;
	moveNextCalled : BOOL := FALSE;
	invalid : BOOL := FALSE; 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{ba00adcc-08d5-4221-8a6d-f1cc9ae85243}" />
    <Folder Name="Destructor" Id="{04ffa51c-112f-420e-8c0b-d25948a287aa}" />
    <Method Name="FB_exit" Id="{ddac9f14-3e19-411b-9efc-b7db5d108772}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

IF parent = 0 THEN
	RETURN;
END_IF

parent.OffEvent('OnChanged',THIS^);
parent.OffEvent('OnDisposed',THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{9785a5f6-7e4a-4ea0-9517-538d8da73e6a}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : I_LinkedList;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Parent.OnEvent('OnChanged',THIS^);
Parent.OnEvent('OnDisposed',THIS^);
this^.parent := Parent;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleEvent" Id="{9b82c3a0-a8d9-4f44-aa61-0031448f4819}">
      <Declaration><![CDATA[METHOD PUBLIC HandleEvent
VAR_INPUT
	Event : I_Event;
END_VAR
VAR
	linkedListChangedEvent : I_LinkedListChangedEvent;
	linkedListDisposedEvent : I_LinkedListDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __QUERYINTERFACE(Event, linkedListChangedEvent) THEN
	invalid := TRUE;
	currentNode := 0;
ELSIF __QUERYINTERFACE(Event, linkedListDisposedEvent) THEN
	parent := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsValid" Id="{aff8eea1-92fe-4c1a-ab72-6d68ef134bd6}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{d7fac01e-4fea-4838-8ffe-61ec719ff66c}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsValid := (not invalid and parent <> 0);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveNext" Id="{6be4d0d4-bc06-473d-8ec1-a047989792d6}">
      <Declaration><![CDATA[METHOD PUBLIC MoveNext : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF invalid THEN
	RETURN;
END_IF

IF NOT moveNextCalled THEN
	moveNextCalled := TRUE;	
	currentNode := parent.First;
	MoveNext := currentNode <> 0;
	RETURN;
END_IF

IF currentNode = 0 THEN
	RETURN;
END_IF

if currentNode.Next <> 0 then
	currentNode := currentNode.Next;
	MoveNext := TRUE;	
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{2017d8bc-6ce2-45f9-b0d2-516b5a2f274c}">
      <Declaration><![CDATA[METHOD PUBLIC Reset]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF parent = 0 THEN
	RETURN;
END_IF

currentNode := 0;
moveNextCalled := FALSE;
invalid := FALSE; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGet" Id="{00128fb3-0888-4680-baae-fe94bc38c29b}">
      <Declaration><![CDATA[METHOD PUBLIC TryGet : BOOL;
VAR_INPUT
	Destination : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF currentNode <> 0 THEN
	TryGet := currentNode.TryGet(Destination);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTo" Id="{1412ae45-9668-4dda-b44d-6048d41a0a8b}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetTo : BOOL;
VAR_INPUT
	Destination : PVOID;
	DestinationSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF currentNode <> 0 THEN
	TryGetTo := currentNode.TryGetTo(Destination,DestinationSize);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>