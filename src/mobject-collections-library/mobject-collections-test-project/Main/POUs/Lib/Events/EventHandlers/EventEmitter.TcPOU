<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EventEmitter" Id="{028e0603-dba8-4258-b1a1-451326b0af98}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK EventEmitter IMPLEMENTS I_GenerateEvents
VAR
	firstGroupItem : I_EventGroupItem;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{d8dfbe0b-7c43-48ea-b76e-4871ea05c158}" />
    <Method Name="AddGroupToCollection" Id="{4d17e948-082e-4d60-8f65-fa6223f3aecb}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddGroupToCollection
VAR_INPUT
	GroupItem : I_EventGroupItem;
END_VAR
VAR
	currentEventItem : I_EventGroupItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF firstGroupItem = 0 THEN
	firstGroupItem := GroupItem;
	RETURN;
END_IF

currentEventItem := firstGroupItem;

WHILE currentEventItem.next <> 0 DO
	currentEventItem := currentEventItem.next;
END_WHILE

currentEventItem.next := GroupItem;
GroupItem.previous := currentEventItem;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNewGroupItem" Id="{72d2a2fc-71c2-4c51-bf8a-5a45e79db617}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC AddNewGroupItem : I_EventGroupItem
VAR_INPUT
	Name : T_MaxString;
END_VAR
VAR
	pEventItem : POINTER TO EventGroupItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pEventItem := __NEW(EventGroupItem(GroupName := Name));
AddNewGroupItem := pEventItem^;
AddGroupToCollection(pEventItem^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{fb8fb208-3745-4de3-beb2-47bf1756431d}">
      <Declaration><![CDATA[METHOD PUBLIC Clear
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE firstGroupItem <> 0 DO
	RemoveGroupItem(firstGroupItem);
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Dispose" Id="{4a56319c-a17b-459d-9075-dd11de926a7a}">
      <Declaration><![CDATA[METHOD PUBLIC Dispose
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Clear();
__Delete(this);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Emit" Id="{475e23d2-bb05-44f0-9b17-00bb12aae86c}">
      <Declaration><![CDATA[METHOD PUBLIC Emit
VAR_INPUT
	Event : I_Event;
END_VAR
VAR
	foundGroupItem : I_EventGroupItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[foundGroupItem := FindGroupItemByName(Event.Name);

IF foundGroupItem = 0 THEN
	RETURN;
END_IF

foundGroupItem.Emit(Event);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindGroupItemByName" Id="{58ad0855-85ce-4d3e-a6be-1d04c7c2b590}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE FindGroupItemByName : I_EventGroupItem
VAR_INPUT
	Name : T_MaxString;
END_VAR
VAR
	currentGroupItem : I_EventGroupItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[currentGroupItem := firstGroupItem;

WHILE currentGroupItem <> 0 DO
	
	IF currentGroupItem.EqualTo(Name) THEN
		FindGroupItemByName := currentGroupItem; 
		RETURN;
	END_IF
	
	currentGroupItem := currentGroupItem.Next;

END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetGroupItemByName" Id="{b8e55560-43aa-4d42-b4c3-c3420348ee6f}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetGroupItemByName : I_EventGroupItem
VAR_INPUT
	Name : T_MaxString;
END_VAR
VAR
	groupItem : I_EventGroupItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[groupItem := FindGroupItemByName(Name);

IF groupItem <> 0 THEN
	GetGroupItemByName := groupItem;
	RETURN;
END_IF

GetGroupItemByName := AddNewGroupItem(Name);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Off" Id="{924894c6-43e2-4da1-b6f0-978a336e6636}">
      <Declaration><![CDATA[METHOD PUBLIC Off
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR
VAR
	eventGroup : I_EventGroupItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventGroup := FindGroupItemByName(EventName);

IF eventGroup = 0 THEN
	RETURN;
END_IF

eventGroup.RemoveHandler(EventHandler);

IF eventGroup.HasHandlers THEN
	RETURN;
END_IF

RemoveGroupItem(eventGroup);]]></ST>
      </Implementation>
    </Method>
    <Method Name="On" Id="{6fe87c0a-6bf6-4f80-992d-48d0d780252a}">
      <Declaration><![CDATA[METHOD PUBLIC On
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetGroupItemByName(EventName).AddHandler(EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveGroupFromCollection" Id="{49734847-939a-475d-8404-29de786aecee}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RemoveGroupFromCollection
VAR_INPUT
	GroupItem : I_EventGroupItem;
END_VAR
VAR
	previous : I_EventGroupItem;
	next : I_EventGroupItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GroupItem = 0 THEN
	// nothing to remove
	RETURN;
END_IF

IF GroupItem = firstGroupItem AND GroupItem.Next = 0 THEN 
	
	// the group item was the only one in the list, as such you just set the first to zero
	firstGroupItem := 0; 
	
ELSIF GroupItem = firstGroupItem THEN 
	
	// the group item was the first in the list of many, so make the next group the first and remove 
	// it's "previous" as the first in the group does not have a previous
	firstGroupItem := GroupItem.next; 
	firstGroupItem.Previous := 0;

ELSIF GroupItem.Next <> 0 THEN
	
	// the group item is mid list so link it's previous and next together 
	previous := GroupItem.Previous;
	next := GroupItem.Next;
	
	previous.Next := next;
	next.Previous := previous;
	
ELSE 
	
	// the group is at the end so only remove itself from the previous
	previous := GroupItem.Previous;
	previous.Next := 0;

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveGroupItem" Id="{b0a82b15-3d10-4974-9322-452b9ef0dc76}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC RemoveGroupItem
VAR_INPUT
	GroupItem : I_EventGroupItem;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveGroupFromCollection(GroupItem);
GroupItem.Dispose();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>