<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="LinkedListNode" Id="{5e3295a8-8728-00cd-24c7-f1f118ce64ba}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK LinkedListNode EXTENDS Disposable IMPLEMENTS I_LinkedListNode
VAR
	internalBuffer : POINTER TO BYTE;
	internalBufferSize : UDINT;
	sourceDataType : T_MAXSTRING;
	previousItem : I_LinkedListNode;
	nextItem : I_LinkedListNode;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{00cf0081-22fc-0196-2eba-bb97052e20fc}" />
    <Folder Name="Private" Id="{9eaeafc6-ecbb-097d-10b7-0f8ae35d999e}" />
    <Folder Name="Protected" Id="{e999ee4c-fb18-02d2-25d7-e34bc424f0f0}" />
    <Method Name="CopyInternalBufferToDestination" Id="{73aa74b7-2c9a-0615-1457-e0b32a19cf73}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CopyInternalBufferToDestination
VAR_INPUT
	DestinationAddress : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[memcpy(DestinationAddress,internalBuffer,internalBufferSize);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CopySourceToInternalBuffer" Id="{38ca70fc-f4b4-01ce-215b-301ca31e9804}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CopySourceToInternalBuffer
VAR_INPUT
	SourceAddress : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[memcpy(internalBuffer,SourceAddress,internalBufferSize);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="DataSize" Id="{75d41a6b-67da-4be1-bcbf-dc1539bf5285}">
      <Declaration><![CDATA[PROPERTY PUBLIC DataSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{e7e89643-4207-4f5d-90b5-1164f268d959}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DataSize := internalBufferSize;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="DeleteInternalBuffer" Id="{414c14d9-dde6-0f16-34c6-00f8486bf86d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DeleteInternalBuffer
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF internalBuffer <> 0 THEN
	__DELETE(internalBuffer);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Equals" Id="{237e2198-6577-03f2-1a92-6ac71c44d7b9}">
      <Declaration><![CDATA[METHOD PUBLIC Equals : BOOL
VAR_INPUT
	Symbol : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsInternalBufferSameSizeAs(DINT_TO_UDINT(Symbol.diSize)) THEN
	RETURN;
END_IF

Equals := memcmp(Symbol.pValue,internalBuffer,Symbol.diSize) = 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{e03352ea-4c53-0e32-0505-0a8f8d1d2075}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Source : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[MakeInternalBufferOfSize(DINT_TO_UDINT(Source.diSize));
CopySourceToInternalBuffer(Source.pValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{c506498c-6814-02f0-0309-9d34495aad00}">
      <Declaration><![CDATA[METHOD PUBLIC Get : BOOL;
VAR_INPUT
	Destination : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get := GetTo(Destination.pValue,Destination.diSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTo" Id="{b0e764ae-6919-034d-0c38-11bcb8b3f6ef}">
      <Declaration><![CDATA[METHOD PUBLIC GetTo : BOOL;
VAR_INPUT
	Destination : PVOID;
	DestinationSize : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsInternalBufferSameSizeAs(DestinationSize) THEN
	RETURN;
END_IF

CopyInternalBufferToDestination(Destination);
GetTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInternalBufferSameSizeAs" Id="{002da77a-9fd2-0f35-0b88-47c175de559d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsInternalBufferSameSizeAs : BOOL
VAR_INPUT
	Size : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF internalBuffer = 0 THEN
	RETURN;
END_IF

IF internalBufferSize <> Size THEN
	RETURN;
END_IF

IsInternalBufferSameSizeAs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeInternalBufferOfSize" Id="{4db879e4-0343-013c-1f1c-d6940bee4b1e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE MakeInternalBufferOfSize
VAR_INPUT
	Size : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[internalBufferSize := Size;
internalBuffer := __NEW(BYTE, internalBufferSize);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Next" Id="{94be5211-a968-09a0-19cf-a3c7f81b7f91}">
      <Declaration><![CDATA[PROPERTY PUBLIC Next : I_LinkedListNode]]></Declaration>
      <Get Name="Get" Id="{58754ac9-9acb-045d-1ec1-4c60c4536430}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Next := nextItem;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{46c73ea7-6cb6-0ed7-14b2-0cc28666ea60}">
        <Declaration><![CDATA[PUBLIC 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nextItem := Next;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="OnDispose" Id="{98ebefce-8725-07d9-2495-fc96930b174e}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnDispose : BOOL
VAR_INPUT
	CalledExplicitly : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[DeleteInternalBuffer();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Previous" Id="{9ad5930a-cb2f-0719-059a-daae580843a4}">
      <Declaration><![CDATA[PROPERTY PUBLIC Previous : I_LinkedListNode]]></Declaration>
      <Get Name="Get" Id="{83339908-bc38-04ff-2eb7-eafbd92f5032}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Previous := previousItem;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{02165ea3-69dd-05ed-09ce-393d5a900c46}">
        <Declaration><![CDATA[PUBLIC 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[previousItem := Previous;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>