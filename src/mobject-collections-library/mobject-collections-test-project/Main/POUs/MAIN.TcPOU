<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{4fc6a7e2-9479-48b5-85ef-622583cb9cd0}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	linkedList_TestSuit : LinkedList_TestSuit;
	queue_TestSuit : Queue_TestSuit;
	stack_TestSuit : Stack_TestSuit;
	
	// variables used in examples	
	linkedList : LinkedList;
	queue : Queue;
	stack : Stack;
	value1 : INT := 123;
	value2 : INT := 456;
	value3 : INT := 789;
	output : INT;
	allowed : BOOL;
	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[TcUnit.RUN();

// LinkedList Examples
// ===================

// using AddFirst, First and RemoveFirst
// -------------------------------------

linkedList.AddFirst(value1); // (first->) 123 (<-last)
linkedList.AddFirst(value2); // (first->) 456, 123 (<-last)
linkedList.AddFirst(value3); // (first->) 789, 456, 123  (<-last)

allowed := linkedList.First.Get(output); // allowed = true, output = 789
linkedList.RemoveFirst(); // (first->) 456, 123  (<-last)
allowed := linkedList.First.Get(output); // allowed = true, output = 456
linkedList.RemoveFirst(); // (first->) 123  (<-last)
allowed := linkedList.First.Get(output); // allowed = true, output = 123
linkedList.RemoveFirst(); // (first->) null (<-last)

// Queue Examples
// ==============

// using Enqueue, TryPeek and TryDequeue
// -------------------------------------

queue.Enqueue(value1); // (first->) 123
queue.Enqueue(value2); // (first->) 123, 456
queue.Enqueue(value3); // (first->) 123, 456, 789

// TryPeek will not remove the item from the queue
allowed := queue.TryPeek(output); // allowed = true, output = 123

// TryDequeue will remove the item from the queue
allowed := queue.TryDequeue(output); // allowed = true, output = 123
allowed := queue.TryDequeue(output); // allowed = true, output = 456
allowed := queue.TryDequeue(output); // allowed = true, output = 789

// Stack Examples
// ==============

// using Push, TryPeek and TryPop
// -------------------------------------

stack.Push(value1); // (fifo->) 123
stack.Push(value2); // (fifo->) 456, 123
stack.Push(value3); // (fifo->) 789, 456, 123

// TryPeek will not remove the item from the stack
allowed := stack.TryPeek(output); // allowed = true, output = 789

// TryDequeue will remove the item from the queue
allowed := stack.TryPop(output); // allowed = true, output = 789
allowed := stack.TryPop(output); // allowed = true, output = 456
allowed := stack.TryPop(output); // allowed = true, output = 123]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>