<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="OrderedDictionary_TestSuite" Id="{fa7f762c-481f-4ca4-aeb2-28f160710c58}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK OrderedDictionary_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CheckAddOrUpdateCorrectlyAddsNewKey();
CheckAddOrUpdateCorrectlyUpdatesExistingKey();
CheckClear();
CheckContainsKeyIsFalse();
CheckContainsKeyIsTrue();
CheckCount();
CheckEnumeratorIsInvalidAfterChange();
CheckGetEnumerator();
CheckGetKeysReturnsACollection();
CheckGetKeysReturnsACollectionOfValidKeys();
CheckOffEvent();
CheckOnceEvent();
CheckOnChangedEvent();
CheckOnDisposedEvent();
CheckRemoveExisting();
CheckRemoveNonExisting();
CheckTryAddCorrectlyAddsNewKey();
CheckTryAddCorrectlyIgnoresUpdateWhenDuplicateFound();
CheckTryAddCorrectlyReturnsFalseWhenDuplicateFound();
CheckTryAddCorrectlyReturnsTrueWhenAddNewKey();
CheckTryGetValueTo();
CheckTryGetValue();
CheckWorksWithArrays();
CheckWorksWithIntegers();
CheckWorksWithStrings();
CheckIsEmptyWhenEmpty();
CheckIsEmptyWhenFull();]]></ST>
    </Implementation>
    <Method Name="CheckAddOrUpdateCorrectlyAddsNewKey" Id="{5abda717-fe48-4290-8167-3e2f32761cd8}">
      <Declaration><![CDATA[METHOD PUBLIC CheckAddOrUpdateCorrectlyAddsNewKey
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckAddOrUpdateCorrectlyAddsNewKey');

dictionary.AddOrUpdate('a',in);
dictionary.TryGetValue('a',out);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckAddOrUpdateCorrectlyUpdatesExistingKey" Id="{7a011527-3143-4456-a317-414c6dde8143}">
      <Declaration><![CDATA[METHOD PUBLIC CheckAddOrUpdateCorrectlyUpdatesExistingKey
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	out : INT;
	expected : INT := 456;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckAddOrUpdateCorrectlyUpdatesExistingKey');

dictionary.AddOrUpdate('a',in1);
dictionary.AddOrUpdate('a',in2);
dictionary.TryGetValue('a',out);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckClear" Id="{3a48a0f8-58b2-45ec-99f2-971f279b7bfd}">
      <Declaration><![CDATA[METHOD PUBLIC CheckClear
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	out : INT;
	expected : INT := 456;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckClear');

dictionary.TryAdd('a',in1);
dictionary.Clear();
dictionary.TryAdd('a',in2); // if the dictionary was not empty then this would fail.
dictionary.TryGetValue('a',out);

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckContainsKeyIsFalse" Id="{4dfad808-6474-4947-bb18-022d30258578}">
      <Declaration><![CDATA[METHOD PUBLIC CheckContainsKeyIsFalse
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckContainsKeyIsFalse');

dictionary.TryAdd('a',in1);
dictionary.TryAdd('b',in2);
dictionary.TryAdd('c',in3);

result := dictionary.ContainsKey('d');

AssertFalse(
	Condition := result,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckContainsKeyIsTrue" Id="{5181967c-5dc2-4249-86b5-a5973b4d465e}">
      <Declaration><![CDATA[METHOD PUBLIC CheckContainsKeyIsTrue
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckContainsKeyIsTrue');

dictionary.TryAdd('a',in1);
dictionary.TryAdd('b',in2);
dictionary.TryAdd('c',in3);

result := dictionary.ContainsKey('b');

AssertTrue(
	Condition := result,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCount" Id="{fed2dc03-8ae5-4959-9bf2-7163dd91f714}">
      <Declaration><![CDATA[METHOD PUBLIC CheckCount
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : DINT;
	expected : DINT := 3;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCount');

dictionary.TryAdd('a',in1);
dictionary.TryAdd('b',in2);
dictionary.TryAdd('c',in3);
out := dictionary.Count;

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEnumeratorIsInvalidAfterChange" Id="{5bdb1c4a-0635-491d-9f7a-7de8dc7dd33c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckEnumeratorIsInvalidAfterChange
VAR
	in : INT := 123;
	result : BOOL;
	dictionary : OrderedDictionary;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckEnumeratorIsInvalidAfterChange');

enumerator := dictionary.GetEnumerator();
dictionary.TryAdd('a',in);

result := enumerator.IsValid;
enumerator.Dispose();

AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetEnumerator" Id="{df94e536-433b-48ee-8c8a-8180e11641a2}">
      <Declaration><![CDATA[METHOD PUBLIC CheckGetEnumerator
VAR
	enumerator : I_ForwardEnumerator;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckGetEnumerator');

enumerator := dictionary.GetEnumerator();

AssertTrue(
	Condition := (enumerator <> 0),
	Message := 'Did not return an enumerator'
);

enumerator.Dispose();

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetKeysReturnsACollection" Id="{fa18359e-ec93-418d-9936-38486c3e976f}">
      <Declaration><![CDATA[METHOD PUBLIC CheckGetKeysReturnsACollection
VAR
	result : BOOL;
	dictionary : OrderedDictionary;
	collection : I_Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckGetKeysReturnsACollection');

collection := dictionary.GetKeys();

result := collection <> 0;

IF result THEN
	collection.Dispose();
END_IF

AssertTrue(
	Condition := result,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetKeysReturnsACollectionOfValidKeys" Id="{8cdfbc20-7dae-499b-bb0e-1b7845ebf01c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckGetKeysReturnsACollectionOfValidKeys
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF T_MAXSTRING;
	expected : ARRAY [0..2] OF T_MAXSTRING;
	result,resulta,resultb,resultc : BOOL;
	dictionary : OrderedDictionary;
	collection : I_Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckGetKeysReturnsACollectionOfValidKeys');

// clear the out and expected variables as strings may contain left over data
memset(ADR(out),0,SIZEOF(out));
memset(ADR(expected),0,SIZEOF(expected));

// now create the "expected"
expected[0] := 'a';
expected[1] := 'b';
expected[2] := 'c';

// now setup the test
dictionary.TryAdd('a',in1);
dictionary.TryAdd('b',in2);
dictionary.TryAdd('c',in3);

collection := dictionary.GetKeys();
collection.TryCopyTo(out);
collection.Dispose();

// create the test result
resulta := expected[0] = out[0];
resultb := expected[1] = out[1];
resultc := expected[2] = out[2];
result := resulta AND resultb AND resultc;

AssertTrue(
	Condition := result,
	Message := 'Did not return an enumerator'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckIsEmptyWhenEmpty" Id="{ad5a6e46-954d-4b96-af48-1a24c39f49bc}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsEmptyWhenEmpty
VAR
	result : BOOL;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsEmptyWhenEmpty');

// @TEST-RUN
result := dictionary.IsEmpty;

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Incorrect state of IsEmpty'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckIsEmptyWhenFull" Id="{0f88c7c1-e633-4b9a-b2cb-d87727015c22}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsEmptyWhenFull
VAR
	in : INT := 123;
	result : BOOL;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsEmptyWhenFull');

// @TEST-FIXTURE
dictionary.AddOrUpdate('a',in);

// @TEST-RUN
result := dictionary.IsEmpty;

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Incorrect state of IsEmpty'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOffEvent" Id="{82c8ac37-fd17-440a-bdb0-f7ae0a3b68a3}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOffEvent
VAR
	value : INT := 123;
	dictionary : OrderedDictionary;
	handler : KeyValueCollectionChangedEventHandler(ExpectedOriginator := dictionary);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOffEvent');

dictionary.OnEvent('OnChanged',handler);
dictionary.OffEvent('OnChanged',handler);

dictionary.TryAdd('a',value);

AssertFalse(
	Condition := handler.EventReceived,
	Message := 'OnceEvent emitted the OnChanged event more than once'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnceEvent" Id="{6d10fe5a-f917-48ab-9734-828222477928}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnceEvent
VAR
	value : INT := 123;
	dictionary : OrderedDictionary;
	handler : KeyValueCollectionChangedEventHandler(ExpectedOriginator := dictionary);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnceEvent');

dictionary.OnceEvent('OnChanged',handler);
dictionary.TryAdd('a',value);
handler.Reset();

dictionary.TryAdd('a',value);

AssertFalse(
	Condition := handler.EventReceived,
	Message := 'OnceEvent emitted the OnChanged event more than once'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnChangedEvent" Id="{ed790b33-f5e3-46ce-a78c-2b584dd73cdf}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnChangedEvent
VAR
	value : INT := 123;
	dictionary : OrderedDictionary;
	handler : KeyValueCollectionChangedEventHandler(ExpectedOriginator := dictionary);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnChangedEvent');

dictionary.OnEvent('OnChanged', handler);
dictionary.TryAdd('a',value);

AssertTrue(
	Condition := handler.EventReceived,
	Message := 'Did not emit the OnChanged event'
);

AssertTrue(
	Condition := handler.FromExpectedOriginator,
	Message := 'Did not include itself in the OnChanged event'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnDisposedEvent" Id="{2c772297-7ea8-4314-8ea7-034a75427a89}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnDisposedEvent
VAR
	value : INT := 123;
	pDictionary : POINTER TO OrderedDictionary;
	handler : KeyValueCollectionDisposedEventHandler(ExpectedOriginator := 0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnDisposedEvent');

pDictionary := __NEW(OrderedDictionary);
handler.SetExpectedOriginator(pDictionary^);
pDictionary^.OnEvent('OnDisposed', handler);

pDictionary^.Dispose();

AssertTrue(
	Condition := handler.EventReceived,
	Message := 'Did not emit the OnDisposed event'
);

AssertTrue(
	Condition := handler.FromExpectedOriginator,
	Message := 'Did not include itself in the OnDisposed event'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveExisting" Id="{670785b8-07fa-45d6-b2f5-b6507c8fa12b}">
      <Declaration><![CDATA[METHOD PRIVATE CheckRemoveExisting
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckRemoveExisting');

dictionary.TryAdd('a',in1);
dictionary.TryAdd('b',in2);
dictionary.TryAdd('c',in3);

dictionary.Remove('c');

result := dictionary.ContainsKey('c');

AssertFalse(
	Condition := result,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveNonExisting" Id="{8f387fd9-5c5d-4029-b4b3-64aa118948a8}">
      <Declaration><![CDATA[METHOD PRIVATE CheckRemoveNonExisting
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : DINT;
	expected : DINT := 3;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckRemoveNonExisting');

dictionary.TryAdd('a',in1);
dictionary.TryAdd('b',in2);
dictionary.TryAdd('c',in3);

dictionary.Remove('d');

out := dictionary.Count;

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryAddCorrectlyAddsNewKey" Id="{1fcec65b-b30f-4197-95d2-1cf6a78ca8d0}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryAddCorrectlyAddsNewKey
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryAddCorrectlyAddsNewKey');

dictionary.TryAdd('a',in);
dictionary.TryGetValue('a',out);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryAddCorrectlyIgnoresUpdateWhenDuplicateFound" Id="{31ecb441-81cb-410e-89c6-60db0689dcdc}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryAddCorrectlyIgnoresUpdateWhenDuplicateFound
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryAddCorrectlyIgnoresUpdateWhenDuplicateFound');

dictionary.TryAdd('a',in1);
dictionary.TryAdd('a',in2);
dictionary.TryGetValue('a',out);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryAddCorrectlyReturnsFalseWhenDuplicateFound" Id="{ff239f35-a611-4016-beb0-517131dfc74a}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryAddCorrectlyReturnsFalseWhenDuplicateFound
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	result : BOOL;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryAddCorrectlyReturnsFalseWhenDuplicateFound');

dictionary.TryAdd('a',in1);
result := dictionary.TryAdd('a',in2);

AssertFalse(
	Condition := result,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryAddCorrectlyReturnsTrueWhenAddNewKey" Id="{ef7c3b31-47ce-4330-9122-caee7c647034}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryAddCorrectlyReturnsTrueWhenAddNewKey
VAR
	in : INT := 123;
	result : BOOL;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryAddCorrectlyReturnsTrueWhenAddNewKey');

result := dictionary.TryAdd('a',in);

AssertTrue(
	Condition := result,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGetValue" Id="{b118e0d1-06bb-4419-996c-e89c5096f847}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGetValue
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGetValue');

dictionary.AddOrUpdate('a',in);
dictionary.TryGetValue('a',out);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGetValueTo" Id="{49b7b3f8-1cf1-49fc-a913-d968bcdd5122}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGetValueTo
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGetValueTo');

dictionary.AddOrUpdate('a',in);
dictionary.TryGetValueTo('a',ADR(out),SIZEOF(out));

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithArrays" Id="{ba09ef49-a9f6-4009-9ab7-0f5c36d8ee12}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithArrays
VAR
	in : ARRAY [0..1] OF REAL := [0.1,2.3];
	out : ARRAY [0..1] OF REAL;
	expected : ARRAY [0..1] OF REAL := [0.1,2.3];
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithArrays');

dictionary.TryAdd('a',in);
dictionary.TryGetValue('a',out);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithIntegers" Id="{7f52a17e-fa96-4fab-bec7-2cf6b1dd468f}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithIntegers
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithIntegers');

dictionary.TryAdd('a',in);
dictionary.TryGetValue('a',out);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithStrings" Id="{4b5b1092-8a3b-4cf6-b3af-38102d861b3a}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithStrings
VAR
	in : STRING := 'test';
	out : STRING;
	expected : STRING := 'test';
	dictionary : OrderedDictionary;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithStrings');

dictionary.TryAdd('a',in);
dictionary.TryGetValue('a',out);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>