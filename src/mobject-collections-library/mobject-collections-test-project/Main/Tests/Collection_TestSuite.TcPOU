<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Collection_TestSuite" Id="{d3a93d34-2153-4b75-80c9-80ae7908bda9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC Collection_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[// check datatypes are handled correctly
CheckListWorksWithIntegers();
CheckListWorksWithStrings();
CheckListWorksWithArrays();

// all other checks
CheckCollectionImplementsI_Collection();
CheckContains();
CheckClear();
CheckCount();
CheckAddItem();
CheckRemoveItem();
CheckCopyTo();
CheckCopyToLocation();
CheckListReturnsEnumerator();
CheckEnumeratorIsInvalidAfterChange();
CheckEnumeratorIsInvalidAfterDispose();]]></ST>
    </Implementation>
    <Method Name="CheckAddItem" Id="{f7f09435-7116-4853-9bcc-8be52c2fa36b}">
      <Declaration><![CDATA[METHOD PUBLIC CheckAddItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	collection : Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckAddItem');

// @TEST-FIXTURE
collection.AddItem(in1);
collection.AddItem(in2);

// @TEST-RUN
collection.AddItem(in3);
result := collection.Contains(in3);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckClear" Id="{1204af22-1c89-41e1-841e-abd311f89eb7}">
      <Declaration><![CDATA[METHOD PUBLIC CheckClear
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	collection : Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckClear');

// @TEST-FIXTURE
collection.AddItem(in1); 
collection.AddItem(in2);
collection.AddItem(in2);

// @TEST-RUN
collection.Clear();

// @TEST-ASSSERT
AssertTrue(
	Condition := collection.Count = 0,
	Message := 'The count is not zero'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCollectionImplementsI_Collection" Id="{59c711aa-3892-49e6-97cd-d51438cff312}">
      <Declaration><![CDATA[METHOD PUBLIC CheckCollectionImplementsI_Collection
VAR
	collection : Collection;
    icollection : I_Collection := collection;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckcollectionImplementsI_Collection');

// @TEST-FIXTURE

// @TEST-RUN
result := icollection <> 0;

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Did not implement I_Collection'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckContains" Id="{2a1e1e0c-1381-4951-964b-f4c65bbe9afb}">
      <Declaration><![CDATA[METHOD PUBLIC CheckContains
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	collection : Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckContains');

// @TEST-FIXTURE
collection.AddItem(in1);
collection.AddItem(in2);
collection.AddItem(in2);

// @TEST-RUN
result := collection.Contains(in2);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Did not find the item in the collection'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCopyTo" Id="{7ed9c13e-e648-4685-a651-0c85386680cc}">
      <Declaration><![CDATA[METHOD PUBLIC CheckCopyTo
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [123,456,789];
	collection : Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCopyTo');

// @TEST-FIXTURE
collection.AddItem(in1);
collection.AddItem(in2);
collection.AddItem(in3);

// @TEST-RUN
collection.CopyTo(out);

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCopyToLocation" Id="{0e56bdea-4891-4107-b0b7-a891ff68ad8e}">
      <Declaration><![CDATA[METHOD PUBLIC CheckCopyToLocation
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [123,456,789];
	collection : Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCopyToLocation');

// @TEST-FIXTURE
collection.AddItem(in1);
collection.AddItem(in2);
collection.AddItem(in3);

// @TEST-RUN
collection.CopyToLocation(ADR(out),SIZEOF(out));

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCount" Id="{fad56f16-6dc0-49da-b1a4-77bab0d1bb02}">
      <Declaration><![CDATA[METHOD PUBLIC CheckCount
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	total : ULINT;
	expected : ULINT := 3;
	collection : Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCount');

// @TEST-FIXTURE
collection.AddItem(in1);
collection.AddItem(in2);
collection.AddItem(in2);

// @TEST-RUN
total := collection.Count;

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := total,
	Message := 'Incorrect count'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEnumeratorIsInvalidAfterChange" Id="{3e8d3f97-efab-4059-89ce-d1fb95591b77}">
      <Declaration><![CDATA[METHOD PUBLIC CheckEnumeratorIsInvalidAfterChange
VAR
	in : INT := 123;
	result : BOOL;
	collection : Collection;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckEnumeratorIsInvalidAfterChange');

// @TEST-FIXTURE
enumerator := collection.GetEnumerator();
collection.AddItem(in);

// @TEST-RUN
result := enumerator.IsValid;
enumerator.Dispose();

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEnumeratorIsInvalidAfterDispose" Id="{202b3039-9a4f-4c1e-8553-0df83dc8db97}">
      <Declaration><![CDATA[METHOD PUBLIC CheckEnumeratorIsInvalidAfterDispose
VAR
	in : INT := 123;
	result : BOOL;
	pCollection : POINTER TO Collection;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckEnumeratorIsInvalidAfterDispose');

// @TEST-FIXTURE
pCollection := __NEW(Collection);
enumerator := pcollection^.GetEnumerator();
__DELETE(pCollection);

// @TEST-RUN
result := enumerator.IsValid;
enumerator.Dispose();

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListReturnsEnumerator" Id="{37cc2be1-dc28-467d-9d28-9384a8146d07}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListReturnsEnumerator
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	enumerator : I_ForwardEnumerator;
	collection : Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListReturnsEnumerator');

// @TEST-FIXTURE
collection.AddItem(in1);
collection.AddItem(in2);
collection.AddItem(in2);

// @TEST-RUN
enumerator := collection.GetEnumerator();

// @TEST-ASSSERT
AssertTrue(
	Condition := (enumerator <> 0),
	Message := 'Did not return an enumerator'
);

// @TEST-DISPOSE
enumerator.Dispose();

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListWorksWithArrays" Id="{f3e9ccce-6f2b-4ca7-8adb-b771c10f9de3}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListWorksWithArrays
VAR
	in : ARRAY [0..1] OF REAL := [0.1,2.3];
	out : ARRAY [0..1] OF REAL;
	expected : ARRAY [0..1] OF REAL := [0.1,2.3];
	result : BOOL;
	collection : Collection;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListWorksWithArrays');

// @TEST-FIXTURE
collection.AddItem(in);

// @TEST-RUN

enumerator := collection.GetEnumerator();
enumerator.MoveNext();
result := enumerator.TryGet(out);
enumerator.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListWorksWithIntegers" Id="{8fa4e349-953d-4ef5-9615-20b4218ab75a}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListWorksWithIntegers
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	collection : Collection;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListWorksWithIntegers');

// @TEST-FIXTURE
collection.AddItem(in);

// @TEST-RUN
enumerator := collection.GetEnumerator();
enumerator.MoveNext();
result := enumerator.TryGet(out);
enumerator.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListWorksWithStrings" Id="{c5738aa7-497c-45ed-aa3e-101274d60b8e}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListWorksWithStrings
VAR
	in : STRING := 'test';
	out : STRING;
	expected : STRING := 'test';
	result : BOOL;
	collection : Collection;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListWorksWithStrings');

// @TEST-FIXTURE
collection.AddItem(in);

// @TEST-RUN
enumerator := collection.GetEnumerator();
enumerator.MoveNext();
result := enumerator.TryGet(out);
enumerator.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveItem" Id="{94136b99-a471-40da-95f5-1e9d6be73161}">
      <Declaration><![CDATA[METHOD PUBLIC CheckRemoveItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	collection : Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckRemoveItem');

// @TEST-FIXTURE
collection.AddItem(in1);
collection.AddItem(in2);
collection.AddItem(in3);

// @TEST-RUN
collection.RemoveItem(in2);
result := collection.Contains(in2);

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>