<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ForwardEnumerator_TestSuite" Id="{20786e16-7e77-4083-a59a-caec9c1719fa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC ForwardEnumerator_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[// check datatypes are handled correctly
CheckWorksWithIntegers();
CheckWorksWithStrings();
CheckWorksWithArrays();
CheckMoveNextReturnsFalseWhenEmpty();
CheckTryGet();
CheckTryGetTo();
CheckIsValidAtStart();]]></ST>
    </Implementation>
    <Method Name="CheckIsValidAtStart" Id="{abc33d92-ea0d-42c6-87a3-bf57551bedba}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsValidAtStart
VAR
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsValidAtStart');

// @TEST-FIXTURE
enumerator := queue.GetEnumerator();

// @TEST-RUN
result := enumerator.IsValid;
enumerator.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsFalseWhenEmpty" Id="{65b0e93c-7b69-4767-a62a-8f9f04129503}">
      <Declaration><![CDATA[METHOD PUBLIC CheckMoveNextReturnsFalseWhenEmpty
VAR
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseWhenEmpty');

// @TEST-FIXTURE
enumerator := queue.GetEnumerator();

// @TEST-RUN
result := enumerator.MoveNext();
enumerator.Dispose();

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGet" Id="{2dcee5c5-b4fb-4e58-9a08-3422440a6fa8}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGet
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGet');

// @TEST-FIXTURE
queue.Enqueue(in);
enumerator := queue.GetEnumerator();
enumerator.MoveNext();

// @TEST-RUN
result := enumerator.TryGet(out);
enumerator.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGetTo" Id="{6eca73a7-072c-49c2-b351-7186815b0c77}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGetTo
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGetTo');

// @TEST-FIXTURE
queue.Enqueue(in);
enumerator := queue.GetEnumerator();
enumerator.MoveNext();

// @TEST-RUN
result := enumerator.TryGetTo(ADR(out),SIZEOF(out));
enumerator.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithArrays" Id="{ecdfe39f-5c48-431d-a429-414d2c214b75}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithArrays
VAR
	in : ARRAY [0..1] OF REAL := [0.1,2.3];
	out : ARRAY [0..1] OF REAL;
	expected : ARRAY [0..1] OF REAL := [0.1,2.3];
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithArrays');

// @TEST-FIXTURE
queue.Enqueue(in);
enumerator := queue.GetEnumerator();
enumerator.MoveNext();

// @TEST-RUN
result := enumerator.TryGet(out);
enumerator.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithIntegers" Id="{c89a0e0a-4eb3-4387-9afc-c1de66930f2f}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithIntegers
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithIntegers');

// @TEST-FIXTURE
queue.Enqueue(in);
enumerator := queue.GetEnumerator();
enumerator.MoveNext();

// @TEST-RUN
result := enumerator.TryGet(out);
enumerator.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithStrings" Id="{a975a256-9926-4506-a6e2-ef065c9848bd}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithStrings
VAR
	in : STRING := 'test';
	out : STRING;
	expected : STRING := 'test';
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithStrings');

// @TEST-FIXTURE
queue.Enqueue(in);
enumerator := queue.GetEnumerator();
enumerator.MoveNext();

// @TEST-RUN
result := enumerator.TryGet(out);
enumerator.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>