<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="QueueForwardEnumerator_TestSuite" Id="{20786e16-7e77-4083-a59a-caec9c1719fa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC QueueForwardEnumerator_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[CheckIsValidAtStart();
CheckMoveNextReturnsFalseAtTheEnd();
CheckMoveNextReturnsFalseWhenEmpty();
CheckMoveNextReturnsTrueMultipleItems();
CheckMoveNextReturnsTrueSingleItem();
CheckReset();
CheckTryGet();
CheckTryGetTo();
CheckWorksWithIntegers();
CheckWorksWithStrings();
CheckWorksWithArrays();]]></ST>
    </Implementation>
    <Method Name="CheckIsValidAtStart" Id="{abc33d92-ea0d-42c6-87a3-bf57551bedba}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsValidAtStart
VAR
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsValidAtStart');

enumerator := queue.GetEnumerator();

result := enumerator.IsValid;
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsFalseAtTheEnd" Id="{d2ed6e3a-b20b-4825-8744-0c8b330f4be8}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsFalseAtTheEnd
VAR
	in1 : INT := 123;
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseAtTheEnd');

queue.Enqueue(in1);
enumerator := queue.GetEnumerator();

enumerator.MoveNext();
result := enumerator.MoveNext();
enumerator.Dispose();

AssertFalse(result,
    'MoveNext did not correctly signal the end of the enumeration');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsFalseWhenEmpty" Id="{65b0e93c-7b69-4767-a62a-8f9f04129503}">
      <Declaration><![CDATA[METHOD PUBLIC CheckMoveNextReturnsFalseWhenEmpty
VAR
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseWhenEmpty');

enumerator := queue.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertFalse(
	Condition := result,
	Message := 'MoveNext did not correctly signal the end of the enumeration'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsTrueMultipleItems" Id="{9c8e6ce1-9d34-4058-ab36-a285acf332cb}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsTrueMultipleItems
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueMultipleItems');

queue.Enqueue(in1);
queue.Enqueue(in2);
queue.Enqueue(in3);
enumerator := queue.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertTrue(result, 'MoveNext did not correctly signal there were more items to follow');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsTrueSingleItem" Id="{48444d73-3704-4f89-8a45-3f85a314ab14}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsTrueSingleItem
VAR
	in1 : INT := 123;
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueSingleItem');

queue.Enqueue(in1);
enumerator := queue.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertTrue(result,
    'MoveNext did not correctly signal there were more items to follow');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckReset" Id="{a068d53e-7d04-4d72-9d76-8b6b1d4d5275}">
      <Declaration><![CDATA[METHOD PUBLIC CheckReset
VAR
	in1 : ARRAY [0..1] OF REAL := [0.1,2.3];
	in2 : ARRAY [0..1] OF REAL := [1.2,3.4];
	in3 : ARRAY [0..1] OF REAL := [2.3,4.5];
	out : ARRAY [0..1] OF REAL;
	expected : ARRAY [0..1] OF REAL := [0.1,2.3];
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckReset');

queue.Enqueue(in1);
queue.Enqueue(in2);
queue.Enqueue(in3);

enumerator := queue.GetEnumerator();

enumerator.MoveNext();
enumerator.MoveNext();
enumerator.Reset();
enumerator.MoveNext();
enumerator.TryGet(out);

enumerator.Dispose();

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGet" Id="{2dcee5c5-b4fb-4e58-9a08-3422440a6fa8}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGet
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGet');

queue.Enqueue(in);
enumerator := queue.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGet(out);
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGetTo" Id="{6eca73a7-072c-49c2-b351-7186815b0c77}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGetTo
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGetTo');

queue.Enqueue(in);
enumerator := queue.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGetTo(ADR(out),SIZEOF(out));
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithArrays" Id="{ecdfe39f-5c48-431d-a429-414d2c214b75}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithArrays
VAR
	in1 : ARRAY [0..1] OF REAL := [0.1,2.3];
	in2 : ARRAY [0..1] OF REAL := [1.2,3.4];
	in3 : ARRAY [0..1] OF REAL := [2.3,4.5];
	out1 : ARRAY [0..1] OF REAL;
	out2 : ARRAY [0..1] OF REAL;
	out3 : ARRAY [0..1] OF REAL;
	expected1 : ARRAY [0..1] OF REAL := [0.1,2.3];
	expected2 : ARRAY [0..1] OF REAL := [1.2,3.4];
	expected3 : ARRAY [0..1] OF REAL := [2.3,4.5];
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithArrays');

queue.Enqueue(in1);
queue.Enqueue(in2);
queue.Enqueue(in3);

enumerator := queue.GetEnumerator();

enumerator.MoveNext();
enumerator.TryGet(out1);
enumerator.MoveNext();
enumerator.TryGet(out2);
enumerator.MoveNext();
enumerator.TryGet(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected 1st result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected 2nd result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected 3rd result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithIntegers" Id="{c89a0e0a-4eb3-4387-9afc-c1de66930f2f}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithIntegers
VAR
	in1 : INT := 123;
	in2 : INT := 234;
	in3 : INT := 345;
	out1 : INT;
	out2 : INT;
	out3 : INT;
	expected1 : INT := 123;
	expected2 : INT := 234;
	expected3 : INT := 345;
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithIntegers');

queue.Enqueue(in1);
queue.Enqueue(in2);
queue.Enqueue(in3);

enumerator := queue.GetEnumerator();

enumerator.MoveNext();
enumerator.TryGet(out1);
enumerator.MoveNext();
enumerator.TryGet(out2);
enumerator.MoveNext();
enumerator.TryGet(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected 1st result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected 2nd result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected 3rd result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithStrings" Id="{a975a256-9926-4506-a6e2-ef065c9848bd}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithStrings
VAR
	in1 : STRING := 'test1';
	in2 : STRING := 'test2';
	in3 : STRING := 'test3';
	out1 : STRING;
	out2 : STRING;
	out3 : STRING;
	expected1 : STRING := 'test1';
	expected2 : STRING := 'test2';
	expected3 : STRING := 'test3';
	queue : Queue;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithStrings');

queue.Enqueue(in1);
queue.Enqueue(in2);
queue.Enqueue(in3);

enumerator := queue.GetEnumerator();

enumerator.MoveNext();
enumerator.TryGet(out1);
enumerator.MoveNext();
enumerator.TryGet(out2);
enumerator.MoveNext();
enumerator.TryGet(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected 1st result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected 2nd result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected 3rd result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>