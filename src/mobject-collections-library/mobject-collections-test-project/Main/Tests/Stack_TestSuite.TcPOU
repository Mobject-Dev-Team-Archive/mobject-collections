<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Stack_TestSuite" Id="{20dd6e3e-1cc3-43f4-aecb-d08b82736d74}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC Stack_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// check datatypes are handled correctly
CheckListWorksWithIntegers();
CheckListWorksWithStrings();
CheckListWorksWithArrays();

// all other checks
CheckStackImplementsI_Stack();
CheckContains();
CheckClear();
CheckCount();
CheckAddItem();
CheckRemoveItem();
CheckTryPopRemovesTheItem();
CheckTryPopReturnsTheCorrectValue();
CheckTryPeekReturnsTheCorrectValue();
CheckTryPeekDoesNotRemoveTheItem();
CheckCopyTo();
CheckCopyToLocation();
CheckStackOrderIsCorrect();
CheckListReturnsEnumerator();
CheckEnumeratorIsInvalidAfterChange();
CheckEnumeratorIsInvalidAfterDispose();
]]></ST>
    </Implementation>
    <Method Name="CheckAddItem" Id="{b1407b4b-116a-428f-9dec-c1ea8851de1a}">
      <Declaration><![CDATA[METHOD PUBLIC CheckAddItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckAddItem');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123

// @TEST-RUN
stack.AddItem(in3); // fifo->) 789, 456, 123
result := stack.Contains(in3);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckClear" Id="{b0101d26-1872-4bfd-a283-d74e6cd3858e}">
      <Declaration><![CDATA[METHOD PUBLIC CheckClear
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckClear');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in2); // (fifo->) 789, 456, 123

// @TEST-RUN
stack.Clear();

// @TEST-ASSSERT
AssertTrue(
	Condition := stack.Count = 0,
	Message := 'The count is not zero'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckContains" Id="{0ee28faa-13ca-4639-ba25-962325dddf5b}">
      <Declaration><![CDATA[METHOD PUBLIC CheckContains
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckContains');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in2); // (fifo->) 789, 456, 123

// @TEST-RUN
result := stack.Contains(in2);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Did not find the item in the queue'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCopyTo" Id="{9fb697c0-ab92-46cd-a4a2-bcf09ce6d767}">
      <Declaration><![CDATA[METHOD PUBLIC CheckCopyTo
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [789,456,123];
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCopyTo');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in3); // (fifo->) 789, 456, 123

// @TEST-RUN
stack.CopyTo(out);

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCopyToLocation" Id="{04778451-d673-4ad2-9578-d96bcc13484c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckCopyToLocation
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [789,456,123];
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCopyToLocation');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in3); // (fifo->) 789, 456, 123

// @TEST-RUN
stack.CopyToLocation(ADR(out),SIZEOF(out));

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCount" Id="{bc7bc879-21cf-45b0-a93e-f33a33d1da30}">
      <Declaration><![CDATA[METHOD PUBLIC CheckCount
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	total : ULINT;
	expected : ULINT := 3;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCount');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in2); // (fifo->) 789, 456, 123

// @TEST-RUN
total := stack.Count;

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := total,
	Message := 'Incorrect count'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEnumeratorIsInvalidAfterChange" Id="{c46e725b-c2ef-40ed-89ed-a29ed877b5f1}">
      <Declaration><![CDATA[METHOD PUBLIC CheckEnumeratorIsInvalidAfterChange
VAR
	in : INT := 123;
	result : BOOL;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckEnumeratorIsInvalidAfterChange');

// @TEST-FIXTURE
enumerator := stack.GetEnumerator();
stack.Push(in);

// @TEST-RUN
result := enumerator.IsValid;
enumerator.Dispose();

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEnumeratorIsInvalidAfterDispose" Id="{4296ac72-b824-47e8-982b-ce1853d8a4d2}">
      <Declaration><![CDATA[METHOD PUBLIC CheckEnumeratorIsInvalidAfterDispose
VAR
	in : INT := 123;
	result : BOOL;
	pStack : POINTER TO Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckEnumeratorIsInvalidAfterDispose');

// @TEST-FIXTURE
pStack := __NEW(Stack);
enumerator := pStack^.GetEnumerator();
__DELETE(pStack);

// @TEST-RUN
result := enumerator.IsValid;
enumerator.Dispose();

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListReturnsEnumerator" Id="{039328e2-24d9-41db-9ec3-f971c7e671c5}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListReturnsEnumerator
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	enumerator : I_ForwardEnumerator;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListReturnsEnumerator');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in2); // (fifo->) 789, 456, 123

// @TEST-RUN
enumerator := stack.GetEnumerator();

// @TEST-ASSSERT
AssertTrue(
	Condition := (enumerator <> 0),
	Message := 'Did not return an enumerator'
);

// @TEST-DISPOSE
enumerator.Dispose();

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListWorksWithArrays" Id="{83af885a-a18c-42cb-bd82-f0d76d1607bc}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListWorksWithArrays
VAR
	in : ARRAY [0..1] OF REAL := [0.1,2.3];
	out : ARRAY [0..1] OF REAL;
	expected : ARRAY [0..1] OF REAL := [0.1,2.3];
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListWorksWithArrays');

// @TEST-FIXTURE
stack.Push(in);

// @TEST-RUN
result := stack.TryPop(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListWorksWithIntegers" Id="{97fd0eb1-152a-4c37-8535-1f0c9b6ad96e}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListWorksWithIntegers
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListWorksWithIntegers');

// @TEST-FIXTURE
stack.Push(in);

// @TEST-RUN
result := stack.TryPop(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListWorksWithStrings" Id="{ccf32e88-5da2-478a-9695-4c326aa1d0e5}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListWorksWithStrings
VAR
	in : STRING := 'test';
	out : STRING;
	expected : STRING := 'test';
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListWorksWithStrings');

// @TEST-FIXTURE
stack.Push(in);

// @TEST-RUN
result := stack.TryPop(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveItem" Id="{f25f826b-ad0f-4bf1-8859-5179bf9b1e64}">
      <Declaration><![CDATA[METHOD PUBLIC CheckRemoveItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckRemoveItem');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in3); // (fifo->) 789, 456, 123

// @TEST-RUN
stack.RemoveItem(in2); // (lifo->) 789, 123
result := stack.Contains(in2);

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckStackImplementsI_Stack" Id="{9f17d6e7-99b9-48b8-a1f6-f977c9a72060}">
      <Declaration><![CDATA[METHOD PUBLIC CheckStackImplementsI_Stack
VAR
	stack : Stack;
    iStack : I_Stack := stack;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckStackImplementsI_Stack');

// @TEST-FIXTURE

// @TEST-RUN
result := iStack <> 0;

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Did not implement I_Stack'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckStackOrderIsCorrect" Id="{4a59aa65-bb7d-4586-a02b-3fa85c6041bb}">
      <Declaration><![CDATA[METHOD PUBLIC CheckStackOrderIsCorrect
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out1, out2, out3 : INT;
	expected1 : INT := 789;
	expected2 : INT := 456;
	expected3 : INT := 123;
	result1, result2, result3 : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckStackOrderIsCorrect');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in3); // (fifo->) 789, 456, 123

// @TEST-RUN
result1 := stack.TryPop(out1);
result2 := stack.TryPop(out2);
result3 := stack.TryPop(out3);

// @TEST-ASSSERT
AssertTrue(
	Condition := result1 AND result2 AND result3,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryPeekDoesNotRemoveTheItem" Id="{053db073-1601-4d48-9295-6aa12fe00b15}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryPeekDoesNotRemoveTheItem
VAR
	in : INT := 123;
	out : INT;
	total : ULINT;
	expected : ULINT := 1;
	stack : Stack;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryPeekDoesNotRemoveTheItem');

// @TEST-FIXTURE
stack.Push(in); // (fifo->) 123

// @TEST-RUN
stack.TryPeek(out);
total := stack.Count;

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := total,
	Message := 'Incorrect count'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryPeekReturnsTheCorrectValue" Id="{25897b35-6be7-4f51-bd32-fc4fb9b1f72c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryPeekReturnsTheCorrectValue
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryPeekReturnsTheCorrectValue');

// @TEST-FIXTURE
stack.Push(in); // (fifo->) 123

// @TEST-RUN
result := stack.TryPeek(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryPopRemovesTheItem" Id="{3cdfc80c-9761-474c-9852-90031bfc446a}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryPopRemovesTheItem
VAR
	in : INT := 123;
	out : INT;
	total : ULINT;
	expected : ULINT := 0;
	stack : Stack;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryPopRemovesTheItem');

// @TEST-FIXTURE
stack.Push(in); // (fifo->) 123

// @TEST-RUN
stack.TryPop(out);
total := stack.Count;

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := total,
	Message := 'Incorrect count'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryPopReturnsTheCorrectValue" Id="{0dabd0b8-5f08-450c-9c2f-0bcd0e95d783}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryPopReturnsTheCorrectValue
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryDequeueReturnsTheCorrectValue');

// @TEST-FIXTURE
stack.Push(in); // (fifo->) 123

// @TEST-RUN
result := stack.TryPop(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>