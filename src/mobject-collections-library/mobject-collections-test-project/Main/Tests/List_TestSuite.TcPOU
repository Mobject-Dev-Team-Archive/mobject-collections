<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="List_TestSuite" Id="{687abae4-6464-4e6f-b6bc-2179a67dd6ef}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK List_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CheckAddAt();
CheckAddFirst();
CheckAddItem();
CheckAddLast();
CheckClear();
CheckContains();
CheckCopyTo();
CheckCopyToLocation();
CheckCount();
CheckGetByIndexInBounds();
CheckGetByIndexNoItems();
CheckGetByIndexOutOfBounds();
CheckImplementsICollection();
CheckImplementsIList();
CheckRemoveAtInBounds();
CheckRemoveAtNoItems();
CheckRemoveAtOutOfBounds();
CheckRemoveFirstShiftUp();
CheckRemoveNonExisting();
CheckRemoveSecondShiftUp();
CheckReturnsEnumerator();
CheckTryGetIndexOfExistingItem();
CheckTryGetIndexOfNonExistingItem();]]></ST>
    </Implementation>
    <Method Name="CheckAddAt" Id="{4199ef1e-4f5e-43c7-ba81-fe66d0a50263}">
      <Declaration><![CDATA[METHOD PRIVATE CheckAddAt
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	expected : INT := 789;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckAddAt');

dArray.AddFirst(in1);
dArray.AddFirst(in2);

dArray.AddAt(1, in3);
dArray.GetByIndex(1, out);

AssertEquals(expected, out, 'Did not produce the expected result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckAddFirst" Id="{dc616732-ccec-4a50-a24e-6046ca902467}">
      <Declaration><![CDATA[METHOD PRIVATE CheckAddFirst
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	expected : INT := 789;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckAddFirst');

dArray.AddLast(in1);
dArray.AddLast(in2);

dArray.AddFirst(in3);
result := dArray.GetByIndex(0, out);

AssertTrue(result, 'GetByIndex returned false');

AssertEquals(expected, out, 'Did not produce the expected result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckAddItem" Id="{53909bfa-2a23-432c-b757-416cc9a28880}">
      <Declaration><![CDATA[METHOD PRIVATE CheckAddItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	expected : INT := 789;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckAddItem');

dArray.AddItem(in1);
dArray.AddItem(in2);
dArray.AddItem(in3);

dArray.GetByIndex(2, out);

AssertEquals(expected, out, 'Did not produce the expected result');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckAddLast" Id="{d8ce7920-f4a3-4ee7-bfb0-5ec4529b25fe}">
      <Declaration><![CDATA[METHOD PRIVATE CheckAddLast
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	expected : INT := 789;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckAddLast');

dArray.AddFirst(in1);
dArray.AddFirst(in2);

dArray.AddLast(in3);
result := dArray.GetByIndex(2, out);

AssertTrue(result, 'GetByIndex returned false');

AssertEquals(expected, out, 'Did not produce the expected result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckClear" Id="{7bdd9076-8eb2-4cff-91b2-e91622dce2a8}">
      <Declaration><![CDATA[METHOD PRIVATE CheckClear
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	expected : INT := 789;
	out : INT;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckClear');

dArray.AddItem(in1);
dArray.AddItem(in2);

dArray.Clear();
dArray.AddItem(in3);

dArray.GetByIndex(0, out);

AssertEquals(expected, out, 'Did not produce the expected result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckContains" Id="{41106fd9-1ecf-4862-9978-93774600dc73}">
      <Declaration><![CDATA[METHOD PRIVATE CheckContains
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckContains');

dArray.AddItem(in1);
dArray.AddItem(in2);
dArray.AddItem(in3);

result := dArray.Contains(in2);

AssertTrue(result, 'Contains returned false while item should be in collection');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCopyTo" Id="{b0184d3d-3b2e-4473-a2b5-bcd866b47371}">
      <Declaration><![CDATA[METHOD PRIVATE CheckCopyTo
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [789,456,123];
	list : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckCopyTo');

// @TEST-FIXTURE
list.AddFirst(in1); // (first->) 123 (<-last)
list.AddFirst(in2); // (first->) 456, 123 (<-last)
list.AddFirst(in3); // (first->) 789, 456, 123 (<-last)

// @TEST-RUN
list.CopyTo(out);

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCopyToLocation" Id="{3e2ea42d-a96e-4b82-9432-3dccf597c7b7}">
      <Declaration><![CDATA[METHOD PRIVATE CheckCopyToLocation
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [789,456,123];
	list : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckCopyToLocation');

// @TEST-FIXTURE
list.AddFirst(in1); // (first->) 123 (<-last)
list.AddFirst(in2); // (first->) 456, 123 (<-last)
list.AddFirst(in3); // (first->) 789, 456, 123 (<-last)

// @TEST-RUN
list.CopyToLocation(ADR(out),SIZEOF(out));

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCount" Id="{e7d8659d-642d-4fc5-bd70-73d1275abde8}">
      <Declaration><![CDATA[METHOD PRIVATE CheckCount
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	expected : ULINT := 3;
	out : ULINT;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckCount');

dArray.AddItem(in1);
dArray.AddItem(in2);
dArray.AddItem(in3);

out := dArray.Count;

AssertEquals(expected, out, 'Did not prodocue the expected result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetByIndexInBounds" Id="{ed595b19-d81c-4103-b5b9-317253636f87}">
      <Declaration><![CDATA[METHOD PRIVATE CheckGetByIndexInBounds
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckGetByIndexInBounds_ReturnsTrue');

dArray.AddItem(in1); //Index 0
dArray.AddItem(in2); //Index 1
dArray.AddItem(in3); //Index 2

result := dArray.GetByIndex(1, out);

AssertTRUE(result, 'GetByIndex returned FALSE while the index is populated');

AssertEquals(in2, out, 'GetByIndex retrieved different value than expected');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetByIndexNoItems" Id="{b54c7e02-1794-445e-93a2-5e10dd961aa3}">
      <Declaration><![CDATA[METHOD PRIVATE CheckGetByIndexNoItems
VAR
	out : INT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckGetByIndexNoItems_ReturnsFalse');

result := dArray.GetByIndex(0, out);

AssertFalse(result, 'GetByIndex returned TRUE while no items exist');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetByIndexOutOfBounds" Id="{a1f9bb81-24dc-40fb-9530-878e73a45762}">
      <Declaration><![CDATA[METHOD PRIVATE CheckGetByIndexOutOfBounds
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckGetByIndexOutOfBounds_ReturnsFalse');

dArray.AddItem(in1); //Index 0
dArray.AddItem(in2); //Index 1
dArray.AddItem(in3); //Index 2

result := dArray.GetByIndex(3, out);

AssertFalse(result, 'GetByIndex returned TRUE while the index is not populated');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckImplementsICollection" Id="{a6d761ea-1ba3-4a5f-b0c7-b9c1be384a89}">
      <Declaration><![CDATA[METHOD PRIVATE CheckImplementsICollection
VAR
	list : List(4);
    collection : I_Collection := list;
    result : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckImplementsICollection');

result := collection <> 0;

AssertTrue(result, 'Did not implement ICollection');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckImplementsIList" Id="{ab3222f8-29e7-4132-b4e8-8f60d299cce9}">
      <Declaration><![CDATA[METHOD PRIVATE CheckImplementsIList
VAR
	list : List(4);
    iLinkedList : I_List := list;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckImplementsILinkedList');

// @TEST-FIXTURE

// @TEST-RUN
result := iLinkedList <> 0;

// @TEST-ASSSERT
AssertTrue(Condition := result,
    Message := 'Did not implement ILinkedList');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveAtInBounds" Id="{71fd981e-ebf6-4028-81ff-00b5119c6397}">
      <Declaration><![CDATA[METHOD PRIVATE CheckRemoveAtInBounds
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckRemoveAtInBounds_ShouldRemoveAndShiftUp');

dArray.AddItem(in1); //Index 0
dArray.AddItem(in2); //Index 1
dArray.AddItem(in3); //Index 2

dArray.RemoveAt(0);

result := dArray.GetByIndex(0, out);

AssertTrue(result, 'Coulndt get first item');

AssertEquals(in2, out, 'Array didnt shift up items');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveAtNoItems" Id="{5eb1d086-e5fd-43f5-a685-8086d855e5ed}">
      <Declaration><![CDATA[METHOD PRIVATE CheckRemoveAtNoItems
VAR
	out : INT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckRemoveAtNoItems_ReturnsFalse');

result := dArray.RemoveAt(0);

AssertFalse(result, 'RemoveAt returned true while there was nothing to remove');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveAtOutOfBounds" Id="{14964f08-9d5c-4b83-9628-56623c1f3cc1}">
      <Declaration><![CDATA[METHOD PRIVATE CheckRemoveAtOutOfBounds
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckRemoveAtOutOfBounds_ReturnsFalse');

dArray.AddItem(in1); //Index 0
dArray.AddItem(in2); //Index 1
dArray.AddItem(in3); //Index 2

result := dArray.RemoveAt(3);

AssertFalse(result, 'RemoveAt returned true while remove was out of bounds');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveFirstShiftUp" Id="{a265e32b-e122-4925-81d7-d57bfffbd7a3}">
      <Declaration><![CDATA[METHOD PRIVATE CheckRemoveFirstShiftUp
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckRemoveFirst_ShiftUp');

dArray.AddItem(in1); //Index 0
dArray.AddItem(in2); //Index 1
dArray.AddItem(in3); //Index 2

dArray.RemoveItem(in1);

result := dArray.GetByIndex(0, out);

AssertTrue(result, 'Coulndt get first item');

AssertEquals(in2, out, 'Array didnt shift up items');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveNonExisting" Id="{f71d7acd-ac3b-434f-88a3-9c9fa917f6bb}">
      <Declaration><![CDATA[METHOD PRIVATE CheckRemoveNonExisting
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckRemoveNonExisting_ReturnsFalse');

dArray.AddItem(in1); //Index 0
dArray.AddItem(in2); //Index 1

result := dArray.RemoveItem(in3);

AssertFalse(result, 'GetByIndex returned something');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRemoveSecondShiftUp" Id="{a9c35f26-ec4f-480d-81e6-f13903eac4e4}">
      <Declaration><![CDATA[METHOD PRIVATE CheckRemoveSecondShiftUp
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckRemoveSecond_ShiftUp');

dArray.AddItem(in1); //Index 0
dArray.AddItem(in2); //Index 1
dArray.AddItem(in3); //Index 2

dArray.RemoveItem(in2);

result := dArray.GetByIndex(1, out);

AssertTrue(result, 'Coulndt get first item');

AssertEquals(in3, out, 'Array didnt shift up items');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckReturnsEnumerator" Id="{d40571a0-acd3-4f34-a952-5924360dee95}">
      <Declaration><![CDATA[METHOD PRIVATE CheckReturnsEnumerator
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	list : List(4);
	enumerator : I_ForwardEnumerator;
	enumerable : I_Enumerable := list;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckLinkedListReturnsEnumerator');

// @TEST-FIXTURE
list.AddItem(in1); // (first->) 123 (<-last)
list.AddItem(in2); // (first->) 456, 123 (<-last)
list.AddItem(in3); // (first->) 789, 456, 123 (<-last)

// @TEST-RUN
result := enumerable <> 0;

enumerator := list.GetEnumerator();

// @TEST-ASSSERT
AssertTrue(result, 'Did not implement IEnumerable');

AssertTrue(
	Condition := (enumerator <> 0),
	Message := 'Did not return an enumerator'
);

// @TEST-DISPOSE
enumerator.Dispose();

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGetIndexOfExistingItem" Id="{bd87f2e8-54dc-42d5-8914-6d113f39282d}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryGetIndexOfExistingItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : UDINT;
	expected : UDINT := 1;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckTryGetIndexOfExistingItem_ReturnsIndex');

dArray.AddItem(in1); //Index 0
dArray.AddItem(in2); //Index 1
dArray.AddItem(in3); //Index 2

result := dArray.TryGetIndexOf(in2, index => out);

AssertTrue(result, 'TryGetIndexOf returned false on a existing item');

AssertEquals(out, expected, 'The index is not the expected index');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGetIndexOfNonExistingItem" Id="{43467fde-fa83-4538-a1b8-7f87bcaf7d56}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryGetIndexOfNonExistingItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : UDINT;
	result : BOOL;
	dArray : List(4);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckTryGetIndexOfNonExistingItem_ReturnsIndex');

dArray.AddItem(in1); //Index 0
dArray.AddItem(in2); //Index 1

result := dArray.TryGetIndexOf(in3, index => out);

AssertFalse(result, 'TryGetIndexOf returned true on a non-existing item');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>