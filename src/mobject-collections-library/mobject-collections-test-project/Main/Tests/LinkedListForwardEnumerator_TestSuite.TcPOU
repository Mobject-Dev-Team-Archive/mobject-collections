<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="LinkedListForwardEnumerator_TestSuite" Id="{2381e592-f91f-4412-a1a4-66463f5fe70a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC LinkedListForwardEnumerator_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[CheckIsValidAtStart();
CheckMoveNextReturnsFalseWhenEmpty();
CheckMoveNextReturnsTrueMultipleItems();
CheckMoveNextReturnsTrueSingleItem();
CheckTryGet();
CheckTryGetTo();
CheckWorksWithIntegers();
CheckWorksWithStrings();
CheckWorksWithArrays();]]></ST>
    </Implementation>
    <Method Name="CheckIsValidAtStart" Id="{a9050e97-32ef-4105-8641-f80b7e8418ab}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsValidAtStart
VAR
	result : BOOL;
	linkedList : LinkedList;
	enumerator : I_ForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsValidAtStart');

enumerator := linkedList.GetEnumerator();

result := enumerator.IsValid;
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsFalseWhenEmpty" Id="{a68253cc-1ed3-49ed-acd4-53baa7fe922c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckMoveNextReturnsFalseWhenEmpty
VAR
	result : BOOL;
	linkedList : LinkedList;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseWhenEmpty');

enumerator := linkedList.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsTrueMultipleItems" Id="{6c65a779-32f6-4f1d-8c65-42f80f450e2b}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsTrueMultipleItems
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	linkedList : LinkedList;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueMultipleItems');

linkedList.AddLast(in1);
linkedList.AddLast(in2);
linkedList.AddLast(in3);
enumerator := linkedList.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertTrue(result, 'MoveNext returned false');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsTrueSingleItem" Id="{3a2f17be-de8b-4215-a9f4-9daac41e8ee6}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsTrueSingleItem
VAR
	in1 : INT := 123;
	result : BOOL;
	linkedList : LinkedList;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueSingleItem');

linkedList.AddLast(in1);
enumerator := linkedList.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertTrue(result,
    'MoveNext returned False');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGet" Id="{474bb7b0-53fa-4de8-b66c-e4b0665dc4d5}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGet
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	linkedList : LinkedList;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGet');

linkedList.AddLast(in);
enumerator := linkedList.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGet(out);
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGetTo" Id="{756242eb-0188-4210-8a68-aca5e5612729}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGetTo
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	linkedList : LinkedList;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGetTo');

linkedList.AddLast(in);
enumerator := linkedList.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGetTo(ADR(out),SIZEOF(out));
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithArrays" Id="{7cf015ca-4657-41d6-beb2-5ed73eae250b}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithArrays
VAR
	in : ARRAY [0..1] OF REAL := [0.1,2.3];
	out : ARRAY [0..1] OF REAL;
	expected : ARRAY [0..1] OF REAL := [0.1,2.3];
	result : BOOL;
	linkedList : LinkedList;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithArrays');

linkedList.AddLast(in);
enumerator := linkedList.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGet(out);
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithIntegers" Id="{4f7f3be9-b4a2-48f3-88e3-3f8e662637bf}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithIntegers
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	linkedList : LinkedList;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithIntegers');

linkedList.AddLast(in);
enumerator := linkedList.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGet(out);
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithStrings" Id="{d619ebb8-0ab7-41b2-a1b5-989a2a8f567f}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithStrings
VAR
	in : STRING := 'test';
	out : STRING;
	expected : STRING := 'test';
	result : BOOL;
	linkedList : LinkedList;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithStrings');

linkedList.AddLast(in);
enumerator := linkedList.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGet(out);
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>