<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Dictionary" Id="{031dc881-40c6-4324-9d62-c901951acf8a}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Dictionary EXTENDS Disposable IMPLEMENTS I_Dictionary
VAR
	eventEmitter : EventEmitter;
	rootNode : I_DictionaryTreeNode;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{5012da5d-fcaa-4f74-a032-4e6b63cbfe64}" />
    <Folder Name="Private" Id="{9d25b7c8-1df3-4ed3-9572-63622da8d884}" />
    <Method Name="AddOrUpdate" Id="{570f59cb-7938-4dac-8308-7b97aad37be6}">
      <Declaration><![CDATA[METHOD PUBLIC AddOrUpdate
VAR_INPUT
	Key : T_MAXSTRING;
	Value : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rootNode := THIS^.RecursiveInsert(Key, Value, rootNode);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Balance" Id="{ab56f670-1784-43c2-b4be-a6cd8425e54f}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE Balance : I_DictionaryTreeNode
VAR_INPUT
	Node : I_DictionaryTreeNode;
END_VAR
VAR
	balanceFactor : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[balanceFactor := THIS^.GetBalanceFactor(Node);

IF (balanceFactor > 1) THEN
	IF THIS^.GetBalanceFactor(Node.Left) < 0 THEN
		Node.Left := THIS^.LeftRotate(Node.Left);
	END_IF
	Node := RightRotate(Node);
ELSIF (balanceFactor < -1) THEN
	IF THIS^.GetBalanceFactor(Node.Right) > 0 THEN
		Node.Right := RightRotate(Node.Right);
	END_IF
	Node := LeftRotate(Node);
END_IF

Balance := Node;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{9a75fda3-7d3e-4c00-8099-3ed82d8caa06}">
      <Declaration><![CDATA[METHOD PUBLIC Clear
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF rootNode = 0 THEN
	RETURN;
END_IF

THIS^.RecursiveClear(rootNode);
rootNode := 0;
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ContainsKey" Id="{71cf2ebb-029b-4b77-a924-aa3f84d32e9a}">
      <Declaration><![CDATA[METHOD PUBLIC ContainsKey : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
END_VAR
VAR
	foundNode : I_DictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[foundNode := THIS^.RecursiveFind(Key, rootNode);

IF foundNode = 0 THEN
	RETURN;
END_IF

ContainsKey := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{0810cbb9-b601-40f6-8a83-a4b723272977}">
      <Declaration><![CDATA[PROPERTY PUBLIC Count : DINT]]></Declaration>
      <Get Name="Get" Id="{854b83fb-3f3f-4905-9aff-a00042a84183}">
        <Declaration><![CDATA[VAR
	NodeCount : DINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RecursiveCountNodes(rootNode, NodeCount);
Count := NodeCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="EmitChangedEvent" Id="{f91919ac-81d2-42a0-903c-303559c7e7a3}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitChangedEvent
VAR
	pDictionaryChangedEvent : POINTER TO KeyValueCollectionChangedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pDictionaryChangedEvent := __NEW(KeyValueCollectionChangedEvent(Target := THIS^));
eventEmitter.Emit('OnChanged', pDictionaryChangedEvent^);
pDictionaryChangedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitDisposedEvent" Id="{e652098c-acc3-495c-8946-544148c9a9cd}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitDisposedEvent
VAR
	pDictionaryDisposedEvent : POINTER TO KeyValueCollectionDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pDictionaryDisposedEvent := __NEW(KeyValueCollectionDisposedEvent(Target := THIS^));
eventEmitter.Emit('OnDisposed', pDictionaryDisposedEvent^);
pDictionaryDisposedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{71c04a47-3ff9-46a8-99cc-89ded94d5d12}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
    RETURN;
END_IF

Clear();
EmitDisposedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindMinimum" Id="{4570296d-5467-479c-98b1-7fba065dc91f}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE FindMinimum : I_DictionaryTreeNode
VAR_INPUT
	Node : I_DictionaryTreeNode;
END_VAR
VAR
	nextNode : I_DictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nextNode := Node;

WHILE (nextNode.left <> 0) DO
      nextNode := nextNode.left;
END_WHILE;

FindMinimum := nextNode;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetBalanceFactor" Id="{2a9ce396-eba7-4b31-8293-f5940b4357aa}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetBalanceFactor : DINT
VAR_INPUT
	Node : I_DictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	GetBalanceFactor := 0;
	RETURN;
END_IF

GetBalanceFactor := THIS^.GetHeight(node.left) - THIS^.GetHeight(node.right);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEnumerator" Id="{811f148d-7603-4a66-8f9c-81037e793ebe}">
      <Declaration><![CDATA[METHOD GetEnumerator : I_ForwardEnumerator
VAR
	pNodeCollection : POINTER TO LinkedList;
	pEnumerator : POINTER TO DictionaryForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodeCollection := __NEW(LinkedList);
THIS^.RecursiveAddNodesInOrderToCollection(rootNode, pNodeCollection^);

pEnumerator := __NEW(DictionaryForwardEnumerator(Parent := THIS^, Nodes := pNodeCollection^));
GetEnumerator := pEnumerator^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetHeight" Id="{7b7a5b98-4d55-42ed-abb9-612f56324af2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetHeight : DINT
VAR_INPUT
	Node : I_DictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Node = 0 THEN
	GetHeight := -1;
	RETURN;
END_IF

GetHeight := Node.Height;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetKeys" Id="{0265b712-1d49-4d4a-86a5-3fecaee64184}">
      <Declaration><![CDATA[METHOD PUBLIC GetKeys : I_Collection
VAR
	pLinkedList : POINTER TO LinkedList;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pLinkedList := __NEW(LinkedList);
THIS^.RecursiveAddKeysInOrderToCollection(rootNode,pLinkedList^);
GetKeys := pLinkedList^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LeftRotate" Id="{1e3efb6c-46c1-4085-b7eb-b2d236432957}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE LeftRotate : I_DictionaryTreeNode
VAR_INPUT
	X : I_DictionaryTreeNode;
END_VAR
VAR
	y : I_DictionaryTreeNode;
	t2 : I_DictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[y := X.right;
t2 := y.left;
y.left := X;
X.right := t2;
THIS^.UpdateHeight(X);
THIS^.UpdateHeight(y);
LeftRotate := y;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OffEvent" Id="{6b0ddc4a-b621-4a2c-aa15-7cb0d3a40197}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{4d736f68-405a-4b32-a051-5ecc61d4c744}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{839d4563-68cb-4221-9e67-a578eb120f01}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveAddKeysInOrderToCollection" Id="{10db98a1-c026-400f-9bc3-da81a12a2813}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveAddKeysInOrderToCollection
VAR_INPUT
	Node : I_DictionaryTreeNode;
	Collection : I_Collection;
END_VAR
VAR
	key : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Node = 0 THEN
	RETURN;
END_IF

THIS^.RecursiveAddKeysInOrderToCollection(Node.Left,Collection);
key := Node.Key;
Collection.AddItem(key);
THIS^.RecursiveAddKeysInOrderToCollection(Node.Right,Collection);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveAddNodesInOrderToCollection" Id="{4344eb88-1c43-47b7-a59b-a93126771af2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveAddNodesInOrderToCollection
VAR_INPUT
	Node : I_DictionaryTreeNode;
	Collection : I_Collection;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Node = 0 THEN
	RETURN;
END_IF

THIS^.RecursiveAddKeysInOrderToCollection(Node.Left,Collection);
Collection.AddItem(Node);
THIS^.RecursiveAddKeysInOrderToCollection(Node.Right,Collection);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveClear" Id="{e76039d0-529f-47ec-a7ab-8c3cbf1105bd}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveClear
VAR_INPUT
	Node : I_DictionaryTreeNode;
END_VAR
VAR
	thisNodeKey : T_MAXSTRING;
	leftNodeKey : T_MAXSTRING;
	rightNodeKey : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	RETURN;
END_IF

thisNodeKey := Node.key;

IF (Node.Left <> 0) THEN
	leftNodeKey := Node.Left.key;
END_IF

IF (Node.Right <> 0) THEN
	rightNodeKey := Node.Right.key;
END_IF


RecursiveClear(Node.Left);
RecursiveClear(Node.Right);
Node.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveCountNodes" Id="{48655c5c-2e08-4e6e-8af7-44a44578ed26}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveCountNodes
VAR_INPUT
	Node : I_DictionaryTreeNode;
	Count : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Node = 0 THEN
	RETURN;
END_IF

Count := Count + 1;

THIS^.RecursiveCountNodes(Node.Left,Count);
THIS^.RecursiveCountNodes(Node.Right,Count);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveDelete" Id="{13a2f8bb-c070-4bfe-a28f-2d1a6438e9b8}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveDelete : I_DictionaryTreeNode
VAR_INPUT
	Key : T_MAXSTRING;
	Node : I_DictionaryTreeNode;
END_VAR
VAR
	newNode : I_DictionaryTreeNode; 
	minValueNode : I_DictionaryTreeNode;
	minValueNodeParent : I_DictionaryTreeNode;
	balanceFactor : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
    RETURN;
END_IF

IF (Key < Node.Key) THEN
    Node.left := THIS^.RecursiveDelete(Key, Node.left);
ELSIF (Key > Node.Key) THEN
    Node.right := THIS^.RecursiveDelete(Key, Node.right);
ELSE
    IF (Node.Left = 0) OR (Node.Right = 0) THEN
        IF (Node.Left = 0) THEN
            newNode := Node.Right;
        ELSE
            newNode := Node.Left;
        END_IF

        Node.Dispose();
        THIS^.updateHeight(newNode);
        RecursiveDelete := THIS^.Balance(newNode);
        RETURN;
    ELSE
        minValueNode := FindMinimum(Node.Right);
        Node.Clone(minValueNode);
        Node.Right := THIS^.RecursiveDelete(minValueNode.Key, Node.Right);	
    END_IF
END_IF

THIS^.updateHeight(Node);
RecursiveDelete := THIS^.Balance(Node);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveFind" Id="{72c9c465-18ec-43f4-9bcd-fa5b73279ee3}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveFind : I_DictionaryTreeNode
VAR_INPUT
	Key : T_MAXSTRING;
	Node : I_DictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	RETURN;
END_IF

IF (Key < Node.key) THEN
  RecursiveFind := THIS^.RecursiveFind(key, Node.left);
  RETURN;
ELSIF (key > Node.key) THEN
  RecursiveFind := THIS^.RecursiveFind(key, Node.right);
  RETURN;
ELSE 
  RecursiveFind := Node;
  RETURN;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RecursiveInsert" Id="{c57d1b55-65c3-4ee8-bbd0-7cf2e85e4be2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RecursiveInsert : I_DictionaryTreeNode
VAR_INPUT
	Key : T_MAXSTRING;
	Value : ANY;
	Node : I_DictionaryTreeNode;
END_VAR
VAR
	pAVLTreeNode : POINTER TO DictionaryTreeNode;
	balanceFactor : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	pAVLTreeNode := __NEW(DictionaryTreeNode);
	pAVLTreeNode^.Initialize(Key, Value);
	RecursiveInsert := pAVLTreeNode^;
	RETURN;
END_IF

IF (Key < Node.Key) THEN
	Node.left := THIS^.RecursiveInsert(Key, Value, Node.left);
ELSIF (Key > Node.Key) THEN
	Node.right := THIS^.RecursiveInsert(Key, Value, Node.right);
ELSE
	Node.Initialize(Key,Value);
	RecursiveInsert := Node;
END_IF

THIS^.updateHeight(node);

balanceFactor := THIS^.GetBalanceFactor(Node);
Node := balance(Node);
RecursiveInsert := Node;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{f7e0145f-426d-4eb3-b5e3-9e9db70ed20a}">
      <Declaration><![CDATA[METHOD PUBLIC Remove
VAR_INPUT
	Key : T_MAXSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rootNode := THIS^.RecursiveDelete(Key, rootNode);
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RightRotate" Id="{8508047b-6b5a-45a7-bfef-30c0ff9ccfee}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RightRotate : I_DictionaryTreeNode
VAR_INPUT
	Y : I_DictionaryTreeNode;
END_VAR
VAR
	x : I_DictionaryTreeNode;
	t2 : I_DictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[x := Y.left;
t2 := x.right;
x.right := Y;
Y.left := t2;
THIS^.UpdateHeight(Y);
THIS^.UpdateHeight(x);
RightRotate := x;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryAdd" Id="{0579aed8-c227-47aa-b1a3-1246c4c9910b}">
      <Declaration><![CDATA[METHOD PUBLIC TryAdd : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Value : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ContainsKey(Key) THEN
	RETURN;
END_IF
	  
THIS^.AddOrUpdate(Key, Value);
TryAdd := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetValue" Id="{ffb946e8-f0b7-49b4-a66d-702f84822d81}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetValue : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination	: ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetValue := TryGetValueTo(Key, Destination.pValue, DINT_TO_UDINT(Destination.diSize));]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetValueTo" Id="{aa8e9fd4-2077-48ab-97f4-da34e1392c01}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetValueTo : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	DestinationAddress : PVOID;
	DestinationSize : UDINT;
END_VAR
VAR
	foundNode : I_DictionaryTreeNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[foundNode := THIS^.RecursiveFind(Key, rootNode);

IF foundNode = 0 THEN
	RETURN;
END_IF

TryGetValueTo := foundNode.TryGetTo(DestinationAddress, DestinationSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateHeight" Id="{84f1a328-3eec-4abf-9c5a-b520652fa526}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE UpdateHeight
VAR_INPUT
	Node : I_DictionaryTreeNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Node = 0) THEN
	RETURN;
END_IF

Node.height := 1 + MAX(THIS^.GetHeight(Node.left), THIS^.GetHeight(Node.right));]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>